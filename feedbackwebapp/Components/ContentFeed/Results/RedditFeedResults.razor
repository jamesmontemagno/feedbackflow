@inject NavigationManager NavigationManager

<div class="reddit-results">
        <div class="d-flex justify-content-between align-items-center mb-3 gap-3">
            <div class="search-container flex-grow-1">
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="bi bi-search"></i>
                    </span>
                    <input 
                        type="text" 
                        class="form-control" 
                        placeholder="Search in titles and content..." 
                        @bind="SearchText" 
                        @bind:event="oninput"
                        @onkeyup="HandleSearch" />
                    @if (!string.IsNullOrWhiteSpace(SearchText))
                    {
                        <button class="btn btn-outline-secondary" @onclick="ClearSearch">
                            <i class="bi bi-x-lg"></i>
                        </button>
                    }
                </div>
            </div>
            <div class="btn-group">
                <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    Sort by: @GetSortDisplayName() @(IsAscending && CurrentSort != SortOption.Default ? "↑" : "↓")
                </button>
                <ul class="dropdown-menu">
                    <li><button class="dropdown-item" @onclick="() => Sort(SortOption.Default)">Relevance</button></li>
                    <li><button class="dropdown-item" @onclick="() => Sort(SortOption.Score)">Score</button></li>
                    <li><button class="dropdown-item" @onclick="() => Sort(SortOption.Comments)">Comments</button></li>
                    <li><button class="dropdown-item" @onclick="() => Sort(SortOption.Date)">Date</button></li>
                </ul>
            </div>
        </div>

    @if (FilteredAndSortedThreads?.Any() == true)
    {
        @if (FilteredAndSortedThreads.Any())
        {
            @foreach (var thread in FilteredAndSortedThreads)
            {
                <div class="card mb-3">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-start mb-2">
                            <h5 class="card-title mb-0">
                                <i class="bi bi-reddit text-danger me-2"></i>
                                @thread.Title
                            </h5>
                            
                            <div class="btn-group">
                                <a href="@thread.Url" target="_blank" class="btn btn-sm btn-outline-secondary" title="Open thread">
                                    <i class="bi bi-box-arrow-up-right"></i>
                                </a>
                                <a href="javascript:void(0)" class="btn btn-sm btn-outline-secondary" @onclick="() => OnAnalyzeClick(thread)" title="Analyze thread">
                                    <i class="bi bi-graph-up"></i>
                                </a>
                            </div>
                        </div>

                        <div class="text-muted mb-2">
                            <i class="bi bi-person-circle me-1"></i> u/@thread.Author
                        </div>
                        
                        @if (!string.IsNullOrWhiteSpace(thread.SelfText))
                        {
                            <p class="card-text">@(thread.SelfText.Length > 200 ? $"{thread.SelfText[..200]}..." : thread.SelfText)</p>
                        }

                        <div class="d-flex gap-3 text-muted mt-3">
                            <div title="Created Date">
                                <i class="bi bi-calendar me-1"></i>
                                @thread.CreatedUtc.LocalDateTime.ToString("MMM dd, yyyy")
                            </div>
                            <div title="Score">
                                <i class="bi bi-arrow-up-circle me-1"></i>
                                @FormatNumber(thread.Score)
                            </div>
                            <div title="Comments">
                                <i class="bi bi-chat-text me-1"></i>
                                @FormatNumber(thread.NumComments)
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="text-center text-muted">
                <p>No threads match your search criteria.</p>
            </div>
        }
    }
    else
    {
        <div class="text-center text-muted">
            <p>No threads found.</p>
        </div>
    }
</div>

@code {
    [Parameter, EditorRequired]
    public List<RedditThreadModel>? Threads { get; set; }

    [Parameter]
    public EventCallback<RedditThreadModel> OnAnalyze { get; set; }

    private string SearchText { get; set; } = string.Empty;
    private System.Timers.Timer? _debounceTimer;
    private SortOption CurrentSort { get; set; } = SortOption.Default;
    private bool IsAscending { get; set; } = true;
    private List<RedditThreadModel>? _originalThreads;

    private enum SortOption
    {
        Default,
        Score,
        Comments,
        Date
    }

    protected override void OnInitialized()
    {
        _debounceTimer = new System.Timers.Timer(300);
        _debounceTimer.Elapsed += async (sender, e) => await InvokeAsync(StateHasChanged);
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        if (_originalThreads == null && Threads != null)
        {
            _originalThreads = Threads.ToList();
        }
        base.OnParametersSet();
    }

    private IEnumerable<RedditThreadModel> FilteredAndSortedThreads
    {
        get
        {
            var baseQuery = Threads ?? new List<RedditThreadModel>();

            // Apply search filter
            if (!string.IsNullOrWhiteSpace(SearchText))
            {
                var searchTerm = SearchText.Trim().ToLowerInvariant();
                baseQuery = baseQuery.Where(t => 
                    (t.Title?.ToLowerInvariant().Contains(searchTerm) ?? false) ||
                    (t.SelfText?.ToLowerInvariant().Contains(searchTerm) ?? false)
                ).ToList();
            }

            // Apply sorting
            return CurrentSort switch
            {
                SortOption.Score => IsAscending 
                    ? baseQuery.OrderBy(t => t.Score)
                    : baseQuery.OrderByDescending(t => t.Score),
                SortOption.Comments => IsAscending 
                    ? baseQuery.OrderBy(t => t.NumComments)
                    : baseQuery.OrderByDescending(t => t.NumComments),
                SortOption.Date => IsAscending 
                    ? baseQuery.OrderBy(t => t.CreatedUtc)
                    : baseQuery.OrderByDescending(t => t.CreatedUtc),
                _ => baseQuery
            };
        }
    }

    private void HandleSearch()
    {
        _debounceTimer?.Stop();
        _debounceTimer?.Start();
    }

    private void ClearSearch()
    {
        SearchText = string.Empty;
        StateHasChanged();
    }

    private void Sort(SortOption option)
    {
        if (CurrentSort == option)
        {
            if (option != SortOption.Default)
            {
                IsAscending = !IsAscending;
            }
        }
        else
        {
            CurrentSort = option;
            if (option == SortOption.Default)
            {
                // Restore original order
                if (_originalThreads != null)
                {
                    Threads = _originalThreads.ToList();
                }
            }
            else
            {
                // Set initial sort direction based on the type of data
                IsAscending = option switch
                {
                    SortOption.Score or SortOption.Comments => false,
                    _ => true
                };
            }
        }
    }

    private string GetSortDisplayName() => CurrentSort switch
    {
        SortOption.Default => "Relevance",
        SortOption.Score => "Score",
        SortOption.Comments => "Comments",
        SortOption.Date => "Date",
        _ => "Relevance"
    };

    private string FormatNumber(long number)
    {
        if (number >= 1_000_000_000)
            return $"{number / 1_000_000_000:N1}B";
        if (number >= 1_000_000)
            return $"{number / 1_000_000:N1}M";
        if (number >= 1_000)
            return $"{number / 1_000:N1}K";
        return number.ToString("N0");
    }

    private void OnAnalyzeClick(RedditThreadModel thread)
    {
        var url = $"https://www.reddit.com{thread.Permalink}";
        NavigationManager.NavigateTo($"/?source=auto&url={Uri.EscapeDataString(url)}");
    }

    public void Dispose()
    {
        _debounceTimer?.Dispose();
    }
}