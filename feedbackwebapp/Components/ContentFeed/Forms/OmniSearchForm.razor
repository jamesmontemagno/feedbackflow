@namespace FeedbackWebApp.Components.ContentFeed.Forms
@using SharedDump.Utils.Account
@using SharedDump.Models.Account
@using FeedbackWebApp.Services.Account
@inject IAccountServiceProvider AccountServiceProvider
@inject Microsoft.JSInterop.IJSRuntime JSRuntime

<div class="omni-search-form">
    <div class="mb-3">
        <label for="omni-query" class="form-label">Search Query</label>
        <input type="text" 
               class="form-control" 
               id="omni-query" 
               @bind="Query" 
               placeholder="Enter your search query..."
               aria-label="Search query" />
    </div>

    <div class="mb-3">
        <label class="form-label d-block">Select Platforms</label>
        <div class="platform-toggles">
            <div class="form-check form-check-inline">
                <input class="form-check-input" 
                       type="checkbox" 
                       id="platform-youtube" 
                       @bind="EnableYouTube" />
                <label class="form-check-label" for="platform-youtube">
                    <i class="bi bi-youtube text-danger"></i> YouTube
                </label>
            </div>
            <div class="form-check form-check-inline">
                <input class="form-check-input" 
                       type="checkbox" 
                       id="platform-reddit" 
                       @bind="EnableReddit" />
                <label class="form-check-label" for="platform-reddit">
                    <i class="bi bi-reddit text-primary"></i> Reddit
                </label>
            </div>
            <div class="form-check form-check-inline">
                <input class="form-check-input" 
                       type="checkbox" 
                       id="platform-hackernews" 
                       @bind="EnableHackerNews" />
                <label class="form-check-label" for="platform-hackernews">
                    <i class="bi bi-newspaper text-warning"></i> Hacker News
                </label>
            </div>
            <div class="form-check form-check-inline">
                <input class="form-check-input" 
                       type="checkbox" 
                       id="platform-twitter" 
                       @bind="EnableTwitter"
                       disabled="@(!canUseTwitter)" />
                <label class="form-check-label" for="platform-twitter">
                    <i class="bi bi-twitter-x"></i> Twitter
                    @if (!canUseTwitter)
                    {
                        <span class="badge bg-warning ms-1" title="Pro account required">Pro</span>
                    }
                </label>
            </div>
            <div class="form-check form-check-inline">
                <input class="form-check-input" 
                       type="checkbox" 
                       id="platform-bluesky" 
                       @bind="EnableBlueSky" />
                <label class="form-check-label" for="platform-bluesky">
                    <i class="bi bi-cloud text-info"></i> BlueSky
                </label>
            </div>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <label for="max-results" class="form-label">Max Results per Platform</label>
            <input type="number" 
                   class="form-control" 
                   id="max-results" 
                   @bind="MaxResults" 
                   min="5" 
                   max="50"
                   aria-label="Maximum results per platform" />
        </div>
        <div class="col-md-6">
            <label for="sort-mode" class="form-label">Sort By</label>
            <select class="form-select" id="sort-mode" @bind="SortMode" aria-label="Sort mode">
                <option value="chronological">Chronological (Newest First)</option>
                <option value="ranked">Ranked (Engagement + Recency)</option>
            </select>
        </div>
    </div>

    <div class="mb-3">
        <div class="form-check">
            <input class="form-check-input" 
                   type="checkbox" 
                   id="enable-date-filter" 
                   @bind="EnableDateFilter" />
            <label class="form-check-label" for="enable-date-filter">
                Enable date range filter
            </label>
        </div>
    </div>

    @if (EnableDateFilter)
    {
        <div class="row mb-3 date-filter-section">
            <div class="col-md-6">
                <label for="from-date" class="form-label">From Date</label>
                <input type="date" 
                       class="form-control" 
                       id="from-date" 
                       @bind="FromDate"
                       aria-label="From date" />
            </div>
            <div class="col-md-6">
                <label for="to-date" class="form-label">To Date</label>
                <input type="date" 
                       class="form-control" 
                       id="to-date" 
                       @bind="ToDate"
                       aria-label="To date" />
            </div>
        </div>
    }
</div>

@code {
    public string Query { get; set; } = "";
    public bool EnableYouTube { get; set; } = true;
    public bool EnableReddit { get; set; } = true;
    public bool EnableHackerNews { get; set; } = true;
    public bool EnableTwitter { get; set; } = false;
    public bool EnableBlueSky { get; set; } = false;
    public int MaxResults { get; set; } = 10;
    public string SortMode { get; set; } = "chronological";
    public bool EnableDateFilter { get; set; } = false;
    public DateTime? FromDate { get; set; }
    public DateTime? ToDate { get; set; }

    private bool canUseTwitter = false;

    protected override async Task OnInitializedAsync()
    {
        // Check if user can access Twitter
        var accountService = AccountServiceProvider.GetService();
        var accountResult = await accountService.GetUserAccountAndLimitsAsync();
        if (accountResult.HasValue && accountResult.Value.account is not null)
        {
            canUseTwitter = AccountTierUtils.SupportsTwitterAccess(accountResult.Value.account.Tier);
        }

        // Try to load from local storage
        await LoadFromLocalStorageAsync();
    }

    public List<string> GetSelectedPlatforms()
    {
        var platforms = new List<string>();
        if (EnableYouTube) platforms.Add("youtube");
        if (EnableReddit) platforms.Add("reddit");
        if (EnableHackerNews) platforms.Add("hackernews");
        if (EnableTwitter && canUseTwitter) platforms.Add("twitter");
        if (EnableBlueSky) platforms.Add("bluesky");
        return platforms;
    }

    public async Task SaveToLocalStorageAsync()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "omniSearch_query", Query);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "omniSearch_youtube", EnableYouTube.ToString());
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "omniSearch_reddit", EnableReddit.ToString());
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "omniSearch_hackernews", EnableHackerNews.ToString());
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "omniSearch_twitter", EnableTwitter.ToString());
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "omniSearch_bluesky", EnableBlueSky.ToString());
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "omniSearch_maxResults", MaxResults.ToString());
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "omniSearch_sortMode", SortMode);
        }
        catch
        {
            // Ignore localStorage errors
        }
    }

    private async Task LoadFromLocalStorageAsync()
    {
        try
        {
            var query = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "omniSearch_query");
            if (!string.IsNullOrEmpty(query))
                Query = query;

            var youtube = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "omniSearch_youtube");
            if (bool.TryParse(youtube, out var enableYouTube))
                EnableYouTube = enableYouTube;

            var reddit = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "omniSearch_reddit");
            if (bool.TryParse(reddit, out var enableReddit))
                EnableReddit = enableReddit;

            var hn = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "omniSearch_hackernews");
            if (bool.TryParse(hn, out var enableHN))
                EnableHackerNews = enableHN;

            var twitter = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "omniSearch_twitter");
            if (bool.TryParse(twitter, out var enableTwitter))
                EnableTwitter = enableTwitter;

            var bluesky = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "omniSearch_bluesky");
            if (bool.TryParse(bluesky, out var enableBlueSky))
                EnableBlueSky = enableBlueSky;

            var maxResults = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "omniSearch_maxResults");
            if (int.TryParse(maxResults, out var max))
                MaxResults = max;

            var sortMode = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "omniSearch_sortMode");
            if (!string.IsNullOrEmpty(sortMode))
                SortMode = sortMode;
        }
        catch
        {
            // Ignore localStorage errors
        }
    }
}
