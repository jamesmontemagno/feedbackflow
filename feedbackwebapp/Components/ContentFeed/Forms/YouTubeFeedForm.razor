@using FeedbackWebApp.Services
@inject IJSRuntime JSRuntime
@inject UserSettingsService UserSettingsService

<div class="youtube-feed-form">
    <div class="form-floating mb-3">
        <input type="text" 
               class="form-control @(showValidation && string.IsNullOrWhiteSpace(Topic) ? "is-invalid" : "")" 
               id="topic" 
               placeholder="Topic" 
               @bind="Topic" 
               @bind:event="oninput" />
        <label for="topic">Topic</label>
        <div class="text-muted">Enter a topic to search for in video titles and descriptions</div>
        @if (showValidation && string.IsNullOrWhiteSpace(Topic))
        {
            <div class="invalid-feedback">
                Please enter a topic to search for
            </div>
        }
    </div>

    <div class="form-floating mb-3">
        <input type="text" class="form-control" id="tag" placeholder="Tag" 
               @bind="Tag" @bind:event="oninput" />
        <label for="tag">Tag (optional)</label>
        <div class="text-muted">Enter a tag to filter videos</div>
    </div>

    <div class="form-floating mb-3">
        <input type="number" 
               class="form-control @(showValidation && (Days < 1 || Days > 30) ? "is-invalid" : "")" 
               id="days" 
               min="1" 
               max="30" 
               @bind="Days" 
               @bind:event="oninput" />
        <label for="days">Days</label>
        <div class="text-muted">Number of days to look back (1-30)</div>
        @if (showValidation && (Days < 1 || Days > 30))
        {
            <div class="invalid-feedback">
                Days must be between 1 and 30
            </div>
        }
    </div>
</div>

@code {
    private const string StorageKey = "YouTubeFeedFormState2";
    private bool showValidation = false;

    // Strongly typed persisted state to avoid dynamic JsonElement issues
    private class PersistedState
    {
        public string? Topic { get; set; }
        public string? Tag { get; set; }
        public int Days { get; set; }
    }

    [Parameter]
    public string Topic { get; set; } = "";

    [Parameter]
    public string? Tag { get; set; }

    [Parameter]
    public int Days { get; set; } = 7;

    protected override async Task OnInitializedAsync()
    {
        await LoadFromLocalStorageAsync();
    }

    public async Task SaveToLocalStorageAsync()
    {
        showValidation = true;
        var state = new
        {
            Topic,
            Tag,
            Days
        };
        await UserSettingsService.SaveToLocalStorageAsync(StorageKey, state);
    }

    private async Task LoadFromLocalStorageAsync()
    {
        try
        {
            var state = await UserSettingsService.GetFromLocalStorageAsync<PersistedState>(StorageKey);
            if (state is not null)
            {
                if (!string.IsNullOrWhiteSpace(state.Topic))
                    Topic = state.Topic;
                if (!string.IsNullOrWhiteSpace(state.Tag))
                    Tag = state.Tag;
                if (state.Days is >= 1 and <= 30)
                    Days = state.Days;
            }
        }
        catch
        {
            // Ignore deserialization issues and keep defaults
        }
    }
}