<div class="segmented-control-container" role="group" aria-label="Select feedback source">
    <div class="segmented-control @(IsDisabled ? "disabled" : "")">
        @foreach (var source in sources)
        {
            <button type="button" 
                    class="segment-button @GetButtonClass(source.Value)"
                    @onclick="() => OnSourceSelectedAsync(source.Value)"
                    aria-pressed="@(source.Value == SelectedSource ? "true" : "false")"
                    disabled="@IsDisabled"
                    title="@source.Description">
                <i class="bi @source.IconClass" aria-hidden="true"></i>
                <span>@source.Name</span>
            </button>
        }    </div>
</div>

@code {
    [Parameter]
    public string? SelectedSource {get;set;} = "Auto";

    [Parameter]
    public EventCallback<string> SelectedSourceChanged { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    private const string DefaultSource = "Auto";
      private readonly SourceOption[] sources = new[]
    {
        new SourceOption(
            "Auto", 
            "bi-magic",
            "Analyze feedback from multiple sources automatically", 
            "Auto"),
        new SourceOption(
            "Manual",
            "bi-pencil-square",
            "Manually enter content and customize the analysis prompt",
            "Manual")
    };
    
    private string GetButtonClass(string source) => 
        source == SelectedSource 
            ? "btn-primary shadow-sm" 
            : "btn-outline-primary";    
            
    private async Task OnSourceSelectedAsync(string value)
    {
        if (SelectedSource != value)
        {
            SelectedSource = value;
            await SelectedSourceChanged.InvokeAsync(value);
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        // If no explicit selection was made, use the default and notify parent components
        if (string.IsNullOrEmpty(SelectedSource))
        {
            SelectedSource = DefaultSource;
            await SelectedSourceChanged.InvokeAsync(DefaultSource);
        }
    }    private record SourceOption(string Name, string IconClass, string Description, string Value);
}