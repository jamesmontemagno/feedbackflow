@namespace FeedbackWebApp.Components.Feedback.Forms
@using System.ComponentModel.DataAnnotations

<div class="auto-input-container">
    <div class="auto-input-list">
        @for (var i = 0; i < Urls.Count; i++)
        {            
            var index = i;
            <div class="input-group mb-2">                
                <div class="form-floating flex-grow-1">
                    <input type="url" 
                           class="form-control" 
                           id="url-@index"
                           value="@Urls[index]"
                           disabled="@IsDisabled"
                           @onchange="@(async (ChangeEventArgs e) => await HandleUrlChange(index, e.Value?.ToString() ?? ""))" />
                    <label for="url-@index">Enter URL</label>
                </div>
                <button class="btn btn-outline-danger" 
                        @onclick="@(() => RemoveUrl(index))" 
                        disabled="@IsDisabled"
                        type="button">
                    <i class="bi bi-x-lg"></i>
                    <span class="visually-hidden">Remove URL</span>
                </button>
            </div>
        }
    </div>

    <button class="btn btn-outline-primary mb-3" 
            @onclick="AddUrl" 
            disabled="@IsDisabled"
            type="button">
        <i class="bi bi-plus-lg"></i> Add Another URL
    </button>

    @* Show individual reports option when multiple URLs are present! *@
    @if (Urls.Count(u => !string.IsNullOrWhiteSpace(u)) > 1)
    {
        <div class="form-check mb-3">
            <input class="form-check-input" 
                   type="checkbox" 
                   id="includeIndividualReports"
                   @bind="IncludeIndividualReports" 
                   disabled="@IsDisabled" />
            <label class="form-check-label" for="includeIndividualReports">
                Include individual reports for each URL
            </label>
            <div class="form-text">
                By default, only a combined analysis is generated. Check this to also get separate analysis for each URL.
            </div>
        </div>
    }
</div>

@code {    
    private List<string> Urls { get; set; } = new() { "" };

    [Parameter]
    public EventCallback<List<string>> OnUrlsChanged { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public bool IncludeIndividualReports { get; set; } = false;

    [Parameter]
    public EventCallback<bool> IncludeIndividualReportsChanged { get; set; }

    public async Task HandleUrlChange(int index, string value)
    {
        Urls[index] = value;
        await OnUrlsChanged.InvokeAsync(Urls);
        StateHasChanged(); // Refresh to show/hide checkbox
    }

    private void AddUrl()
    {
        Urls.Add("");
        StateHasChanged(); // Refresh to show/hide checkbox
    }

    private async Task RemoveUrl(int index)
    {
        if (Urls.Count > 1)
        {
            Urls.RemoveAt(index);
            await OnUrlsChanged.InvokeAsync(Urls);
            StateHasChanged(); // Refresh to show/hide checkbox
        }
    }

    public void RefreshUI() => StateHasChanged();
    
    public List<string> GetUrls() => Urls.Where(u => !string.IsNullOrWhiteSpace(u)).ToList();
    
    public bool GetIncludeIndividualReports() => IncludeIndividualReports;
}
