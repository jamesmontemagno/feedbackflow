@namespace FeedbackWebApp.Components.Feedback.Results
@using SharedDump.Models
@using SharedDump.Utils
@using System.Text

@{
    var visual = SourceVisualMapping.GetVisual(Thread.SourceType);
}

<div class="card thread-card shadow-sm mb-4" @key="Thread.Id">
    <div class="card-header thread-header">
        <div class="d-flex justify-content-between align-items-start">
            <div class="thread-title-section flex-grow-1">
                <h5 class="card-title thread-title mb-2">
                    <i class="bi @visual.Icon @visual.CssClass me-2" aria-hidden="true"></i>
                    @if (!string.IsNullOrEmpty(Thread.Url))
                    {
                        <a href="@Thread.Url" target="_blank" class="thread-title-link text-decoration-none">
                            @Thread.Title
                        </a>
                    }
                    else
                    {
                        @Thread.Title
                    }
                </h5>
                
                <div class="thread-metadata d-flex flex-wrap align-items-center gap-3 text-muted small">
                    <span class="thread-author">
                        <i class="bi bi-person me-1" aria-hidden="true"></i>
                        @Thread.Author
                    </span>
                    <time datetime="@Thread.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss")" 
                          title="@Thread.CreatedAt.ToLocalTime().ToString("g")">
                        <i class="bi bi-calendar me-1" aria-hidden="true"></i>
                        @GetFormattedDate(Thread.CreatedAt)
                    </time>
                    @GetMetadataBadgesMarkup(Thread)
                </div>
            </div>
            
            <div class="thread-actions d-flex align-items-center gap-2">
                @if (ThreadHeaderExtra is not null)
                {
                    @ThreadHeaderExtra(Thread)
                }
                
                @if (!string.IsNullOrEmpty(Thread.Url))
                {
                    <a href="@Thread.Url" target="_blank" 
                       class="btn btn-sm btn-outline-secondary" 
                       title="View original">
                        <i class="bi bi-box-arrow-up-right" aria-hidden="true"></i>
                        <span class="d-none d-md-inline ms-1">View</span>
                    </a>
                }
                
                @if (Thread.Comments.Any())
                {
                    <button class="btn btn-sm btn-outline-primary thread-toggle-btn" 
                            @onclick="() => OnToggleComments(Thread.Id)"
                            aria-expanded="@IsExpanded.ToString().ToLowerInvariant()"
                            title="@(IsExpanded ? "Hide comments" : $"Show {Thread.Comments.Count} comments")">
                        <i class="bi bi-chat-text me-1" aria-hidden="true"></i>
                        @(IsExpanded ? "Hide" : "Show") 
                        <span class="comment-count">(@Thread.Comments.Count)</span>
                    </button>
                }
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(Thread.Description))
    {
        <div class="card-body thread-description">
            <div class="thread-description-content">
                @if (IsHtmlDescription(Thread))
                {
                    @((MarkupString)Thread.Description)
                }
                else
                {
                    @Thread.Description
                }
            </div>
        </div>
    }

    @if (Thread.Comments.Any() && IsExpanded)
    {
        <div class="card-body thread-comments">
            <h6 class="comments-header mb-3">
                <i class="bi bi-chat-dots me-2" aria-hidden="true"></i>
                Comments (@Thread.Comments.Count)
            </h6>
            
            <div class="comments-container" role="list" aria-label="Comments for @Thread.Title">
                @foreach (var comment in Thread.Comments)
                {
                    <ThreadComment Comment="comment" 
                                 MaxDepthToAutoExpand="MaxCommentDepthToAutoExpand"
                                 Compact="CompactComments" />
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter, EditorRequired]
    public CommentThread Thread { get; set; } = null!;

    [Parameter]
    public RenderFragment<CommentThread>? ThreadHeaderExtra { get; set; }

    [Parameter]
    public int MaxCommentDepthToAutoExpand { get; set; } = 3;

    [Parameter]
    public bool CompactComments { get; set; } = false;

    [Parameter]
    public Action<string> OnToggleComments { get; set; } = _ => { };

    [Parameter]
    public bool IsExpanded { get; set; } = false;

    private bool IsHtmlDescription(CommentThread thread)
    {
        return thread.Metadata?.ContainsKey("IsHtmlDescription") == true && 
               thread.Metadata["IsHtmlDescription"] is bool isHtml && isHtml;
    }

    private MarkupString GetMetadataBadgesMarkup(CommentThread thread)
    {
        var badgeHtml = new StringBuilder();

        if (thread.Metadata is not null)
        {
            // Score/Upvotes
            if (thread.Metadata.TryGetValue("Score", out var score) ||
                thread.Metadata.TryGetValue("Upvotes", out score))
            {
                badgeHtml.Append($@"<span class=""badge badge-score"">
                    <i class=""bi bi-arrow-up-circle me-1"" aria-hidden=""true""></i>{score}
                </span>");
            }

            // View count
            if (thread.Metadata.TryGetValue("ViewCount", out var viewCount))
            {
                badgeHtml.Append($@"<span class=""badge badge-views"">
                    <i class=""bi bi-eye me-1"" aria-hidden=""true""></i>{FormatNumber(viewCount)}
                </span>");
            }

            // Like count
            if (thread.Metadata.TryGetValue("LikeCount", out var likeCount))
            {
                badgeHtml.Append($@"<span class=""badge badge-likes"">
                    <i class=""bi bi-heart me-1"" aria-hidden=""true""></i>{FormatNumber(likeCount)}
                </span>");
            }

            // Comment count (from metadata if different from actual comments)
            if (thread.Metadata.TryGetValue("CommentCount", out var commentCount) ||
                thread.Metadata.TryGetValue("NumComments", out commentCount))
            {
                badgeHtml.Append($@"<span class=""badge badge-comments"">
                    <i class=""bi bi-chat me-1"" aria-hidden=""true""></i>{commentCount}
                </span>");
            }

            // Rate limit info
            if (thread.Metadata.TryGetValue("RateLimitInfo", out var rateLimitInfo))
            {
                badgeHtml.Append($@"<span class=""badge badge-warning"" title=""Rate limited"">
                    <i class=""bi bi-exclamation-triangle me-1"" aria-hidden=""true""></i>Limited
                </span>");
            }

            // Incomplete data flag
            if (thread.Metadata.TryGetValue("MayBeIncomplete", out var incomplete) && 
                incomplete is bool isIncomplete && isIncomplete)
            {
                badgeHtml.Append($@"<span class=""badge badge-warning"" title=""Data may be incomplete"">
                    <i class=""bi bi-info-circle me-1"" aria-hidden=""true""></i>Partial
                </span>");
            }
        }

        return new MarkupString(badgeHtml.ToString());
    }

    private string FormatNumber(object? value)
    {
        if (value is null) return "0";
        
        return value switch
        {
            int i => i >= 1000 ? $"{i / 1000.0:F1}k" : i.ToString(),
            long l => l >= 1000 ? $"{l / 1000.0:F1}k" : l.ToString(),
            _ => value.ToString() ?? "0"
        };
    }

    private string GetFormattedDate(DateTime date)
    {
        var localDate = date.ToLocalTime();
        var now = DateTime.Now;
        var diff = now - localDate;

        return diff.TotalDays switch
        {
            < 1 when diff.TotalHours < 1 => $"{(int)diff.TotalMinutes}m ago",
            < 1 => $"{(int)diff.TotalHours}h ago",
            < 7 => $"{(int)diff.TotalDays}d ago",
            _ => localDate.ToString("MMM dd, yyyy")
        };
    }
}