@using SharedDump.Models.TwitterFeedback
@using FeedbackWebApp.Services.Interfaces
@namespace FeedbackWebApp.Components.Feedback.Results
@inject FeedbackServiceProvider FeedbackServiceProvider
@inject NavigationManager Navigation

@if (_feedback?.Items is not null && _feedback.Items.Count > 0)
{
    <div class="card shadow-sm mt-4">
        <div class="card-header">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0">
                    <i class="bi bi-twitter-x text-primary me-2"></i>
                    Found Comments (@GetTotalCommentCount(_feedback.Items))
                </h5>
                <div>
                    @if (_feedback.ProcessedTweetCount > 0)
                    {
                        <span class="badge bg-info me-2">Processed @_feedback.ProcessedTweetCount tweets</span>
                    }
                    @if (!string.IsNullOrEmpty(TweetUrlOrId))
                    {
                        <a href="https://twitter.com/x/status/@TweetUrlOrId" target="_blank" class="btn btn-sm btn-outline-secondary">
                            <i class="bi bi-box-arrow-up-right"></i> View on X
                        </a>
                    }
                </div>
            </div>
        </div>
        <div class="card-body">
            @if (_feedback.MayBeIncomplete)
            {
                <div class="alert alert-warning mb-3">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                    <strong>Note:</strong> Results may be incomplete due to API rate limits.
                    @if (!string.IsNullOrEmpty(_feedback.RateLimitInfo))
                    {
                        <span>@_feedback.RateLimitInfo</span>
                    }
                </div>
            }
            <div class="comments-list">
                @foreach (var tweet in _feedback.Items)
                {
                    <TwitterComment Comment="tweet" />
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string? TweetUrlOrId { get; set; }
    [Parameter] public TwitterFeedbackResponse? Response { get; set; }
    [Parameter] public EventCallback OnBack { get; set; }

    private ITwitterFeedbackService? _service;
    private TwitterFeedbackResponse? _feedback;
    private string? _error;

    
    private int GetTotalCommentCount(List<TwitterFeedbackItem> items)
    {
        if (items == null) return 0;
        
        var count = items.Count;
        foreach (var item in items)
        {
            if (item.Replies != null)
            {
                count += GetTotalCommentCount(item.Replies);
            }
        }
        return count;
    }

    protected override async Task OnParametersSetAsync()
    {
        // If Response is provided directly, use it
        if (Response != null)
        {
            _feedback = Response;
            return;
        }
        
        if (string.IsNullOrWhiteSpace(TweetUrlOrId))
        {
            return;
        }
        _error = null;
        try
        {
            _service = FeedbackServiceProvider.CreateTwitterService(TweetUrlOrId);
            var (markdown, additionalData) = await _service.GetFeedback();
            _feedback = additionalData as TwitterFeedbackResponse;
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
        }
    }
}
