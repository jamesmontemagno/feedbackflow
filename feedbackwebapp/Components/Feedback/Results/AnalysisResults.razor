@namespace FeedbackWebApp.Components.Feedback.Results
@using System.Text.RegularExpressions
@using SharedDump.Utils
@using Microsoft.Extensions.Logging
@using SharedDump.Services
@using FeedbackWebApp.Services.Feedback
@inject IJSRuntime JSRuntime
@inject ILogger<AnalysisResults> Logger
@inject FeedbackWebApp.Services.UserSettingsService UserSettings
@inject ISpeechSynthesisService SpeechSynthesisService
@inject FeedbackWebApp.Services.ISharedHistoryServiceProvider SharedHistoryServiceProvider
@inject FeedbackWebApp.Services.IToastService ToastService
@inject SharedDump.Services.Interfaces.IExportService ExportService
@inject NavigationManager NavigationManager
@implements IDisposable

<CopyFailedDialog 
    IsVisible="@showCopyFailedDialog"
    Content="@failedCopyContent"
    ContentType="@failedCopyContentType"
    OnClose="@CloseCopyFailedDialog" />


@if (!string.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger mt-4" role="alert">
        <i class="bi bi-exclamation-triangle-fill me-2" aria-hidden="true"></i>
        @Error
    </div>
}

@if (!string.IsNullOrEmpty(MarkdownResult))
{
    <div class="card mt-4 shadow-sm">        
        <header class="card-header bg-primary text-white">
            <div class="d-flex justify-content-between align-items-center mb-2">
                <h2 class="card-title mb-0 h5">Analysis Summary</h2>
            </div>
            
            <!-- Action buttons on secondary line -->
            <div class="analysis-actions d-flex flex-wrap align-items-center justify-content-end gap-2">
                @if (!string.IsNullOrEmpty(MarkdownResult))
                {
                    <ExportButton Items="@(new[] { CreateHistoryItemForExport() })" ButtonVariant="light" Size="sm" Mini="false" />
                }
                
                <!-- Save & Share Dropdown -->
                <div class="dropdown d-inline-block">
                    <button class="btn btn-sm btn-outline-light dropdown-toggle action-btn @(_isSaved ? "btn-saved" : "")" 
                            type="button" 
                            id="saveShareDropdown" 
                            data-bs-toggle="dropdown" 
                            aria-expanded="false"
                            disabled="@isProcessingSave"
                            title="@(_isSaved ? "Saved - Copy link" : "Save and share analysis")"
                            aria-label="@(_isSaved ? "Analysis saved" : "Save and share analysis")">
                        @if (isProcessingSave)
                        {
                            <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                            @:Saving...
                        }
                        else
                        {
                            <i class="bi @(_isSaved ? "bi-check-circle" : "bi-cloud-upload") me-1" aria-hidden="true"></i>
                            @(_isSaved ? "Saved - Copy link" : "Save & Share")
                        }
                    </button>
                    <ul class="dropdown-menu save-share-menu" aria-labelledby="saveShareDropdown">
                        @if (!_isSaved && !isProcessingSave)
                        {
                            <li><h6 class="dropdown-header">Save Analysis</h6></li>
                            <li>
                                <button class="dropdown-item" @onclick="() => HandleSaveClick(false)" disabled="@isProcessingSave">
                                    <i class="bi bi-lock me-2" aria-hidden="true"></i>Save Privately
                                    <small class="text-muted d-block">Only you can view this analysis</small>
                                </button>
                            </li>
                            <li>
                                <button class="dropdown-item" @onclick="() => HandleSaveClick(true)" disabled="@isProcessingSave">
                                    <i class="bi bi-globe me-2" aria-hidden="true"></i>Save & Share Publicly
                                    <small class="text-muted d-block">Anyone with the link can view</small>
                                </button>
                            </li>
                        }
                        else if (_isSaved)
                        {
                            <li><h6 class="dropdown-header">Analysis Saved</h6></li>
                            @if (!string.IsNullOrEmpty(shareUrl))
                            {
                                <li>
                                    <button class="dropdown-item" @onclick="CopyShareUrl">
                                        <i class="bi bi-link-45deg me-2" aria-hidden="true"></i>Copy Share Link
                                    </button>
                                </li>
                                <li><hr class="dropdown-divider"></li>
                            }
                            <li>
                                <a class="dropdown-item" href="/history" target="_blank">
                                    <i class="bi bi-folder-open me-2" aria-hidden="true"></i>View in History
                                </a>
                            </li>
                        }
                        else if (isProcessingSave)
                        {
                            <li><h6 class="dropdown-header">Saving...</h6></li>
                            <li><span class="dropdown-item-text text-muted">Please wait while we save your analysis</span></li>
                        }
                    </ul>
                </div>
                
                <button class="btn btn-sm btn-outline-light action-btn @(_isSpeaking ? "btn-speak-active" : "")" 
                        @onclick="SpeakAnalysis"
                        aria-label="@(_isSpeaking ? "Stop speaking" : "Speak analysis")"
                        aria-pressed="@_isSpeaking.ToString().ToLower()">
                    <i class="bi @(_isSpeaking ? "bi-pause-fill" : "bi-volume-up-fill") me-1" aria-hidden="false"></i>
                    @(_isSpeaking ? "Stop" : "Speak")
                </button>
                
                <button class="btn btn-sm btn-outline-light action-btn" 
                        @onclick="CopyToClipboard"
                        aria-label="Copy to clipboard">
                    <i class="bi bi-clipboard me-1" aria-hidden="false"></i>
                    Copy
                </button>
            </div>
        </header>
        <div class="card-body">
            <div class="markdown-body" tabindex="0">
                @((MarkupString)Markdown.ToHtml(MarkdownResult))
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string? Error { get; set; }

    [Parameter]
    public string? MarkdownResult { get; set; }
    
    [Parameter]
    public string SourceType { get; set; } = "Manual";
    
    [Parameter]
    public string? UserInput { get; set; }
    
    [Parameter]
    public object? AdditionalData { get; set; }
    
    private string? _previousMarkdown;
    private bool _isSpeaking = false;
    private bool _isSaved = false;
    private string? _savedItemId;
    
    // Save & Share state
    private bool isProcessingSave = false;
    private string? shareUrl;
    
    // Copy failed dialog state
    private bool showCopyFailedDialog = false;
    private string failedCopyContent = string.Empty;
    private string failedCopyContentType = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(MarkdownResult))
        {
            // If we're currently speaking and new content arrives, stop the speech
            if (_isSpeaking)
            {
                await SpeechSynthesisService.CancelAsync();
                _isSpeaking = false;
            }
            
            if(_previousMarkdown != MarkdownResult)
            {               
                await TriggerConfetti();
                // Reset all state for new analysis
                _isSaved = false;
                _savedItemId = null;
                isProcessingSave = false;
                shareUrl = null;
                _previousMarkdown = MarkdownResult;
            }
        }
    }

    private async Task TriggerConfetti()
    {
        await JSRuntime.InvokeVoidAsync("confetti", new
        {
            particleCount = 100,
            spread = 70,
            origin = new { y = 0.6 }
        });
    }   

    private async Task CopyToClipboard()
    {
        if (string.IsNullOrEmpty(MarkdownResult))
            return;
        
        try
        {
            var success = await JSRuntime.InvokeAsync<bool>("copyToClipboard", MarkdownResult);
            if (success)
            {
                await ToastService.ShowSuccessAsync("Analysis copied to clipboard", 3000);
            }
            else
            {
                // Show dialog instead of error toast
                ShowCopyFailedDialog(MarkdownResult, "Analysis");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to copy analysis to clipboard");
            // Show dialog instead of error toast
            ShowCopyFailedDialog(MarkdownResult, "Analysis");
        }
        
    }    
    
    private async Task HandleSaveClick(bool isPublic)
    {
        if (string.IsNullOrEmpty(MarkdownResult) || _isSaved)
            return;

        isProcessingSave = true;
        StateHasChanged();

        try
        {
            var analysisData = new SharedDump.Models.AnalysisData
            {
                Id = _savedItemId ?? Guid.NewGuid().ToString(),
                Title = $"{SourceType} Analysis",
                Summary = !string.IsNullOrEmpty(MarkdownResult) && MarkdownResult.Length > 500 
                    ? MarkdownResult.Substring(0, 500) + "..." 
                    : MarkdownResult ?? string.Empty,
                FullAnalysis = MarkdownResult ?? string.Empty,
                SourceType = SourceType,
                UserInput = UserInput,
                CreatedDate = DateTime.UtcNow,
            };

            var savedId = await SharedHistoryServiceProvider.GetService().ShareAnalysisAsync(analysisData, isPublic);
            
            if (string.IsNullOrEmpty(savedId))
            {
                await ToastService.ShowErrorAsync("Failed to save analysis. Please try again.");
                return;
            }
            
            // Update component state
            _isSaved = true;
            _savedItemId = savedId;
            
            if (isPublic)
            {
                shareUrl = $"{NavigationManager.BaseUri.TrimEnd('/')}/analysis/{savedId}";
            }
            
            await ToastService.ShowSuccessAsync("Analysis saved successfully!", 3000);
            await TriggerConfetti();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to save analysis");
            await ToastService.ShowErrorAsync("Failed to save analysis. Please try again.");
        }
        finally
        {
            isProcessingSave = false;
            StateHasChanged();
        }
    }

    private async Task CopyShareUrl()
    {
        if (!string.IsNullOrEmpty(shareUrl))
        {
            try
            {
                var success = await JSRuntime.InvokeAsync<bool>("copyToClipboard", shareUrl);
                if (success)
                {
                    await ToastService.ShowSuccessAsync("Share URL copied to clipboard!", 3000);
                }
                else
                {
                    ShowCopyFailedDialog(shareUrl, "Share URL");
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Failed to copy share URL to clipboard");
                ShowCopyFailedDialog(shareUrl, "Share URL");
            }
        }
    }

    private List<SharedDump.Models.CommentThread> ConvertAdditionalDataToCommentThreads()
    {
        if (AdditionalData == null)
            return new List<SharedDump.Models.CommentThread>();

        // Handle HackerNews analysis separately since it's defined in the webapp
        if (AdditionalData is List<HackerNewsAnalysis> hackerNewsAnalyses)
        {
            return HackerNewsCommentConverter.ConvertHackerNewsAnalysis(hackerNewsAnalyses);
        }

        // For all other types, use the shared converter
        return CommentDataConverter.ConvertAdditionalData(AdditionalData);
    }
    
    private async Task SpeakAnalysis()
    {
        if (!string.IsNullOrEmpty(MarkdownResult))
        {
            try
            {                
                if (_isSpeaking)
                {
                    await SpeechSynthesisService.CancelAsync();
                    _isSpeaking = false;
                }
                else
                {
                    // Clean up the markdown text for better speech using the utility method
                    var cleanText = MarkdownUtils.CleanForSpeech(MarkdownResult);

                    // Get user's preferred voice if set
                    var preferredVoiceUri = await UserSettings.GetPreferredVoiceAsync();
                    
                    // Create utterance
                    var utterance = new SpeechSynthesisUtterance
                    {
                        Text = cleanText,
                        Rate = 1.0f,
                        Pitch = 1.0f
                    };
                    
                    // Set user's preferred voice if available
                    if (!string.IsNullOrEmpty(preferredVoiceUri))
                    {
                        var voices = await SpeechSynthesisService.GetVoicesAsync();
                        var selectedVoice = voices.FirstOrDefault(v => v.VoiceURI == preferredVoiceUri);
                        
                        if (selectedVoice != null)
                        {
                            utterance.Voice = selectedVoice;
                        }
                    }
                    
                    // Speak the text and handle end event
                    _isSpeaking = true;
                    await SpeechSynthesisService.SpeakAsync(utterance);
                    
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error in speech synthesis");
                _isSpeaking = false;
            }
            
            StateHasChanged();
        }
    }


    
    private void ShowCopyFailedDialog(string content, string contentType)
    {
        failedCopyContent = content;
        failedCopyContentType = contentType;
        showCopyFailedDialog = true;
        StateHasChanged();
    }

    private void CloseCopyFailedDialog()
    {
        showCopyFailedDialog = false;
        failedCopyContent = string.Empty;
        failedCopyContentType = string.Empty;
        StateHasChanged();
    }
    
    private AnalysisHistoryItem CreateHistoryItemForExport()
    {
        if (string.IsNullOrEmpty(MarkdownResult))
            return new AnalysisHistoryItem();
                      
        return new AnalysisHistoryItem
        {
            Id = _savedItemId ?? Guid.NewGuid().ToString(),
            FullAnalysis = MarkdownResult,
            SourceType = SourceType,
            UserInput = UserInput,
            Timestamp = DateTime.UtcNow,
            CommentThreads = ConvertAdditionalDataToCommentThreads()
        };
    }

    public void Dispose()
    {
        // Ensure speech is stopped when component is disposed
        if (_isSpeaking)
        {
            _ = SpeechSynthesisService.CancelAsync();
            _isSpeaking = false;
        }
    }
}