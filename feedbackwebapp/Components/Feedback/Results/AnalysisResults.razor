@namespace FeedbackWebApp.Components.Feedback.Results
@using System.Text.RegularExpressions
@using SharedDump.Utils
@using FeedbackWebApp.Components.Shared
@using Microsoft.Extensions.Logging
@using SharedDump.Services
@using FeedbackWebApp.Services.Feedback
@inject IJSRuntime JSRuntime
@inject ILogger<AnalysisResults> Logger
@inject FeedbackWebApp.Services.UserSettingsService UserSettings
@inject ISpeechSynthesisService SpeechSynthesisService
@inject FeedbackWebApp.Services.Interfaces.IHistoryService HistoryService
@inject FeedbackWebApp.Services.IToastService ToastService
@inject FeedbackWebApp.Services.Interfaces.IAnalysisSharingService SharingService
@inject SharedDump.Services.Interfaces.IExportService ExportService
@inject NavigationManager NavigationManager
@implements IDisposable

<CopyFailedDialog 
    IsVisible="@showCopyFailedDialog"
    Content="@failedCopyContent"
    ContentType="@failedCopyContentType"
    OnClose="@CloseCopyFailedDialog" />



@if (!string.IsNullOrEmpty(Error))
{
    <div class="alert alert-danger mt-4" role="alert">
        <i class="bi bi-exclamation-triangle-fill me-2" aria-hidden="true"></i>
        @Error
    </div>
}

@if (!string.IsNullOrEmpty(MarkdownResult))
{
    <div class="card mt-4 shadow-sm">        
        <header class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h2 class="card-title mb-0 h5">Analysis Summary</h2>
            <ActionMenu>
                <PrimaryAction>
                    @if (!string.IsNullOrEmpty(MarkdownResult))
                    {
                        <ExportButton Items="@(new[] { CreateHistoryItemForExport() })" ButtonVariant="light" Size="sm" Mini="true" />
                    }
                </PrimaryAction>                  
                <ChildContent>
                    @if (!string.IsNullOrEmpty(MarkdownResult))
                    {
                        <ExportButton Items="@(new[] { CreateHistoryItemForExport() })" ButtonVariant="light" Size="sm" Mini="false" />
                    }
                    <button class="btn btn-sm btn-outline-light me-2 action-btn" 
                            @onclick="SaveToHistory"
                            disabled="@_isSaved"
                            aria-label="Save to history">
                        <i class="bi bi-clock-history me-1" aria-hidden="false"></i>
                        @(_isSaved ? "Saved" : "Save")
                    </button>
                    <button class="btn btn-sm btn-outline-light me-2 action-btn" 
                            @onclick="@(sharedId == null ? ShareAnalysis : CopyShareLink)"
                            aria-label="@(sharedId == null ? "Share analysis" : "Copy share link")">
                        <i class="bi @(sharedId == null ? "bi-share" : "bi-link-45deg") me-1" aria-hidden="false"></i>
                        @(sharedId == null ? "Share" : "Copy Link")
                    </button>
                    <button class="btn btn-sm btn-outline-light me-2 action-btn @(_isSpeaking ? "btn-speak-active" : "")" 
                            @onclick="SpeakAnalysis"
                            aria-label="@(_isSpeaking ? "Stop speaking" : "Speak analysis")"
                            aria-pressed="@_isSpeaking.ToString().ToLower()">
                        <i class="bi @(_isSpeaking ? "bi-pause-fill" : "bi-volume-up-fill") me-1" aria-hidden="false"></i>
                        @(_isSpeaking ? "Stop" : "Speak")
                    </button>
                    <button class="btn btn-sm btn-outline-light action-btn" 
                            @onclick="CopyToClipboard"
                            aria-label="Copy to clipboard">
                        <i class="bi bi-clipboard me-1" aria-hidden="false"></i>
                        Copy
                    </button>
                </ChildContent>
                <SecondaryActions>
                    <li><button class="dropdown-item" @onclick="SaveToHistory" disabled="@_isSaved">
                        <i class="bi bi-clock-history"></i> @(_isSaved ? "Saved" : "Save to History")
                    </button></li>
                    <li><button class="dropdown-item" @onclick="@(sharedId == null ? ShareAnalysis : CopyShareLink)">
                        <i class="bi @(sharedId == null ? "bi-share" : "bi-link-45deg")"></i> 
                        @(sharedId == null ? "Share Analysis" : "Copy Share Link")
                    </button></li>
                    <li><button class="dropdown-item" @onclick="SpeakAnalysis">
                        <i class="bi @(_isSpeaking ? "bi-pause-fill" : "bi-volume-up-fill")"></i> 
                        @(_isSpeaking ? "Stop Speaking" : "Speak Analysis")
                    </button></li>
                    <li><button class="dropdown-item" @onclick="CopyToClipboard">
                        <i class="bi bi-clipboard"></i> Copy Analysis
                    </button></li>                
                </SecondaryActions>
            </ActionMenu>
        </header>
        <div class="card-body">
            <div class="markdown-body" tabindex="0">
                @((MarkupString)Markdown.ToHtml(MarkdownResult))
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string? Error { get; set; }

    [Parameter]
    public string? MarkdownResult { get; set; }
    
    [Parameter]
    public string SourceType { get; set; } = "Manual";
    
    [Parameter]
    public string? UserInput { get; set; }
    
    [Parameter]
    public object? AdditionalData { get; set; }
    
    private string? _previousMarkdown;
    private bool _isSpeaking = false;
    private string? sharedId;
    private string? shareLink;
    private bool isProcessingShare = false;
    private bool _isSaved = false;
    private string? _savedItemId;
    
    // Copy failed dialog state
    private bool showCopyFailedDialog = false;
    private string failedCopyContent = string.Empty;
    private string failedCopyContentType = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(MarkdownResult))
        {
            // If we're currently speaking and new content arrives, stop the speech
            if (_isSpeaking)
            {
                await SpeechSynthesisService.CancelAsync();
                _isSpeaking = false;
            }
            
            if(_previousMarkdown != MarkdownResult)
            {               
                await TriggerConfetti();
                sharedId = null;
                shareLink = null;
                isProcessingShare = false;
                _isSaved = false;
                _savedItemId = null;
                _previousMarkdown = MarkdownResult;
                
                // Check if this analysis is already saved
                await CheckIfItemIsSaved();
            }
        }
    }

    private async Task CheckIfItemIsSaved()
    {
        if (string.IsNullOrEmpty(MarkdownResult))
            return;
            
        var historyItems = await HistoryService.GetHistoryAsync();
        var existingItem = historyItems.FirstOrDefault(h => h.FullAnalysis == MarkdownResult);
        if (existingItem != null)
        {
            _isSaved = true;
            _savedItemId = existingItem.Id;
            StateHasChanged();
        }
    }

    private async Task TriggerConfetti()
    {
        await JSRuntime.InvokeVoidAsync("confetti", new
        {
            particleCount = 100,
            spread = 70,
            origin = new { y = 0.6 }
        });
    }   

    private async Task CopyToClipboard()
    {
        if (!string.IsNullOrEmpty(MarkdownResult))
        {
            try
            {
                var success = await JSRuntime.InvokeAsync<bool>("copyToClipboard", MarkdownResult);
                if (success)
                {
                    await ToastService.ShowSuccessAsync("Analysis copied to clipboard", 3000);
                }
                else
                {
                    // Show dialog instead of error toast
                    ShowCopyFailedDialog(MarkdownResult, "Analysis");
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Failed to copy analysis to clipboard");
                // Show dialog instead of error toast
                ShowCopyFailedDialog(MarkdownResult, "Analysis");
            }
        }
    }    
    
    private async Task SaveToHistory()
    {
        if (!string.IsNullOrEmpty(MarkdownResult))
        {
            var commentThreads = ConvertAdditionalDataToCommentThreads();
            
            var historyItem = new SharedDump.Models.AnalysisHistoryItem
            {
                Summary = MarkdownResult.Length > 300 ? MarkdownResult.Substring(0, 300) + "..." : MarkdownResult,
                FullAnalysis = MarkdownResult,
                SourceType = SourceType,
                UserInput = UserInput,
                CommentThreads = commentThreads
            };
            await HistoryService.SaveToHistoryAsync(historyItem);
            _isSaved = true;
            _savedItemId = historyItem.Id;
            await ToastService.ShowSuccessAsync("Analysis saved to history", 3000);
        }
    }

    private List<SharedDump.Models.CommentThread> ConvertAdditionalDataToCommentThreads()
    {
        if (AdditionalData == null)
            return new List<SharedDump.Models.CommentThread>();

        // Handle HackerNews analysis separately since it's defined in the webapp
        if (AdditionalData is List<HackerNewsAnalysis> hackerNewsAnalyses)
        {
            return HackerNewsCommentConverter.ConvertHackerNewsAnalysis(hackerNewsAnalyses);
        }

        // For all other types, use the shared converter
        return CommentDataConverter.ConvertAdditionalData(AdditionalData);
    }
    
    private async Task SpeakAnalysis()
    {
        if (!string.IsNullOrEmpty(MarkdownResult))
        {
            try
            {                
                if (_isSpeaking)
                {
                    await SpeechSynthesisService.CancelAsync();
                    _isSpeaking = false;
                }
                else
                {
                    // Clean up the markdown text for better speech using the utility method
                    var cleanText = MarkdownUtils.CleanForSpeech(MarkdownResult);

                    // Get user's preferred voice if set
                    var preferredVoiceUri = await UserSettings.GetPreferredVoiceAsync();
                    
                    // Create utterance
                    var utterance = new SpeechSynthesisUtterance
                    {
                        Text = cleanText,
                        Rate = 1.0f,
                        Pitch = 1.0f
                    };
                    
                    // Set user's preferred voice if available
                    if (!string.IsNullOrEmpty(preferredVoiceUri))
                    {
                        var voices = await SpeechSynthesisService.GetVoicesAsync();
                        var selectedVoice = voices.FirstOrDefault(v => v.VoiceURI == preferredVoiceUri);
                        
                        if (selectedVoice != null)
                        {
                            utterance.Voice = selectedVoice;
                        }
                    }
                    
                    // Speak the text and handle end event
                    _isSpeaking = true;
                    await SpeechSynthesisService.SpeakAsync(utterance);
                    
                    StateHasChanged();
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error in speech synthesis");
                _isSpeaking = false;
            }
            
            StateHasChanged();
        }
    }

    private async Task CopyShareLink()
    {
        if (!string.IsNullOrEmpty(shareLink))
        {
            try
            {
                var success = await JSRuntime.InvokeAsync<bool>("copyToClipboard", shareLink);
                if (success)
                {
                    await ToastService.ShowSuccessAsync("Share link copied to clipboard!", 3000);
                }
                else
                {
                    // Show dialog instead of error toast
                    ShowCopyFailedDialog(shareLink, "Share Link");
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Failed to copy share link to clipboard");
                // Show dialog instead of error toast
                ShowCopyFailedDialog(shareLink, "Share Link");
            }
        }
    }    
    
    private async Task ShareAnalysis()
    {
        if(isProcessingShare || string.IsNullOrEmpty(MarkdownResult))
            return;
            
        isProcessingShare = true;
        await ToastService.ShowInfoAsync("Creating share link...", 5000);

        try
        {
            SharedDump.Models.AnalysisHistoryItem historyItem;
            
            // If the item is already saved, use that instead of creating a new one
            if (_isSaved && !string.IsNullOrEmpty(_savedItemId))
            {
                var historyItems = await HistoryService.GetHistoryAsync();
                historyItem = historyItems.First(h => h.Id == _savedItemId);
            }
            else
            {
                // Create and save new history item
                var commentThreads = ConvertAdditionalDataToCommentThreads();
                
                historyItem = new SharedDump.Models.AnalysisHistoryItem
                {
                    Summary = MarkdownResult.Length > 300 ? MarkdownResult.Substring(0, 300) + "..." : MarkdownResult,
                    FullAnalysis = MarkdownResult,
                    SourceType = SourceType,
                    UserInput = UserInput,
                    CommentThreads = commentThreads
                };
                await HistoryService.SaveToHistoryAsync(historyItem);
                _isSaved = true;
                _savedItemId = historyItem.Id;
            }

            var analysisData = new SharedDump.Models.AnalysisData
            {
                Id = historyItem.Id,
                Title = $"{SourceType} Analysis",
                Summary = historyItem.Summary,
                FullAnalysis = historyItem.FullAnalysis,
                SourceType = SourceType,
                UserInput = UserInput,
                CreatedDate = DateTime.UtcNow
            };

            sharedId = await SharingService.ShareAnalysisAsync(analysisData);

            if (string.IsNullOrEmpty(sharedId))
            {
                await ToastService.ShowErrorAsync("Unable to create share link.");
                return;
            }
            
            await SharingService.UpdateHistoryItemWithShareInfoAsync(historyItem.Id, sharedId);
            
            // Store and copy share link
            shareLink = $"{NavigationManager.BaseUri.TrimEnd('/')}/shared/{sharedId}";
            
            var copySuccess = await JSRuntime.InvokeAsync<bool>("copyToClipboard", shareLink);
            
            if (copySuccess)
            {
                // Trigger confetti and show success message
                await ToastService.ShowSuccessAsync("Share link copied to clipboard! The link will be valid for 30 days.", 5000);
                await TriggerConfetti();
            }
            else
            {
                // Show dialog instead of generic message
                ShowCopyFailedDialog(shareLink, "Share Link");
                await ToastService.ShowSuccessAsync("Share link created! The link will be valid for 30 days.", 5000);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Unable to create share link");
            await ToastService.ShowErrorAsync($"Unable to create share link: {ex.Message}");
        }
        finally
        {
            isProcessingShare = false;
            StateHasChanged();
        }
    }
      
    private void ShowCopyFailedDialog(string content, string contentType)
    {
        failedCopyContent = content;
        failedCopyContentType = contentType;
        showCopyFailedDialog = true;
        StateHasChanged();
    }

    private void CloseCopyFailedDialog()
    {
        showCopyFailedDialog = false;
        failedCopyContent = string.Empty;
        failedCopyContentType = string.Empty;
        StateHasChanged();
    }
    
    private AnalysisHistoryItem CreateHistoryItemForExport()
    {
        if (string.IsNullOrEmpty(MarkdownResult))
            return new AnalysisHistoryItem();
            
        var commentThreads = ConvertAdditionalDataToCommentThreads();
        
        return new AnalysisHistoryItem
        {
            Id = _savedItemId ?? Guid.NewGuid().ToString(),
            Summary = MarkdownResult.Length > 300 ? MarkdownResult.Substring(0, 300) + "..." : MarkdownResult,
            FullAnalysis = MarkdownResult,
            SourceType = SourceType,
            UserInput = UserInput,
            CommentThreads = commentThreads,
            Timestamp = DateTime.UtcNow
        };
    }

    public void Dispose()
    {
        // Ensure speech is stopped when component is disposed
        if (_isSpeaking)
        {
            _ = SpeechSynthesisService.CancelAsync();
            _isSpeaking = false;
        }
    }
}