@page "/"
@* Updated to handle single URLs instead of comma-separated lists *@
@namespace FeedbackWebApp.Components.Pages

@using System.Web
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@using FeedbackWebApp.Components.Feedback.Forms
@using FeedbackWebApp.Components.Feedback.Results
@using FeedbackWebApp.Services.Interfaces
@using FeedbackWebApp.Services.Feedback
@using FeedbackWebApp.Services.Authentication
@using FeedbackWebApp.Components.Shared
@using SharedDump.Models
@using SharedDump.Models.Account
@using SharedDump.Models.BlueSkyFeedback
@using SharedDump.Models.DevBlogs
@using SharedDump.Models.GitHub
@using SharedDump.Models.HackerNews
@using SharedDump.Models.Reddit
@using SharedDump.Models.YouTube
@using SharedDump.Utils

@inject IConfiguration Configuration
@inject FeedbackServiceProvider ServiceProvider
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject UserSettingsService UserSettings
@inject IHistoryService HistoryService
@inject IAuthenticationService AuthService

<PageTitle>Feedback Analysis - FeedbackFlow</PageTitle>

<NewFeaturesDialog 
    IsVisible="@showNewFeaturesDialog" 
    OnClose="@CloseNewFeaturesDialog"
    OnGotIt="@MarkNewFeaturesAsSeen" 
    OnRemindLater="@CloseNewFeaturesDialog" />

<UsageLimitDialog 
    UsageError="@usageLimitError" 
    IsVisible="@showUsageLimitDialog" 
    OnClose="@CloseUsageLimitDialog" />

<div class="container">
    @if (!isAuthenticated)
    {
        <AuthenticationForm OnAuthenticatedWithDetails="HandleAuthenticatedWithDetails" />
    }
    else
    {        
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1 class="feedbackflow-title mb-0">Analyze</h1>
            <SourceSelector @bind-SelectedSource="selectedSource" IsDisabled="@isLoading" />
        </div>

        @if (selectedSource == "Auto")
        {
            <PlatformPills />
        }

        @if (!string.IsNullOrEmpty(selectedSource))
        {            
            <div class="card shadow-sm">
                <div class="card-body">
                    @if (selectedSource.Equals("Auto", StringComparison.OrdinalIgnoreCase))
                    {
                        <AutoDataSourceForm @ref="autoDataSourceForm" IsDisabled="@isLoading" />
                    }
                    else if (selectedSource.Equals("Manual", StringComparison.OrdinalIgnoreCase))
                    {
                        <ManualFeedbackInput @ref="manualInputForm" IsDisabled="@isLoading" />
                    }

                    <SubmitButton ShowWhenSource="@selectedSource" IsLoading="@isLoading" OnSubmit="SubmitFeedbackRequest" />
                    
                    @if (isLoading)
                    {
                        <div class="alert alert-info mt-3">
                            <div class="d-flex align-items-center">
                                <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <div>
                                <strong>@currentStatus</strong>
                                <div class="small">@currentStatusMessage</div>
                            </div>
                        </div>
                    }                    
                        
                    <AnalysisResults 
                        Error="@error" 
                        MarkdownResult="@markdownResult" 
                        SourceType="@selectedSourceFinal"
                        UserInput="@GetUserInputForSource()"
                        AdditionalData="@GetAdditionalDataForAnalysis()" /> 

                    @* Display additional data from FeedbackSourceData list *@
                    @if (feedbackSources != null && feedbackSources.Any())
                    {
                        foreach (var source in feedbackSources)
                        {
                            if (source.AdditionalData != null)
                            {
                                @if (source.AdditionalData is List<YouTubeOutputVideo> videos)
                                {
                                    <YouTubeComments Videos="@videos" />
                                }
                                else if (source.AdditionalData is List<HackerNewsAnalysis> analyses)
                                {
                                    <HackerNewsResults Analyses="@analyses" />
                                }
                                else if (source.AdditionalData is List<GithubIssueModel> issues)
                                {
                                    <GitHubFeedback Issues="@issues" PullRequests="@null" Discussions="@null" />
                                }
                                else if (source.AdditionalData is List<GithubDiscussionModel> discussions)
                                {
                                    <GitHubFeedback Issues="@null" PullRequests="@null" Discussions="@discussions" />
                                }
                                else if (source.AdditionalData is List<RedditThreadModel> threads)
                                {
                                    <RedditComments Threads="@threads" />
                                }
                                else if (source.AdditionalData is DevBlogsArticleModel article)
                                {
                                    <DevBlogsFeedbackResults Article="@article" />
                                }
                                else if(source.AdditionalData is BlueSkyFeedbackResponse blueSkyFeedbackResponse)
                                {
                                    <BlueSkyFeedbackResults Response="@blueSkyFeedbackResponse" />
                                }
                            }
                        }
                    }
                </div>
            </div>
        }
    }
</div>

@code {
    private AutoDataSourceForm? autoDataSourceForm;
    private ManualFeedbackInput? manualInputForm;
    private string selectedSource = "Auto";
    private string markdownResult = "";
    private string error = "";
    private bool isLoading = false;
    private bool isAuthenticated = false;
    private bool showNewFeaturesDialog = false;
    private bool showUsageLimitDialog = false;
    private UsageValidationResult? usageLimitError;
    private List<FeedbackSourceData>? feedbackSources;
    private object? currentAdditionalData;
    private FeedbackProcessStatus currentStatus;
    private string currentStatusMessage = "";
    private string? initialSource;
    private string? initialId;

    private async Task HandleAuthenticatedWithDetails((bool success, bool justLoggedIn) details)
    {
        Console.WriteLine($"[Home] HandleAuthenticatedWithDetails: success={details.success}, justLoggedIn={details.justLoggedIn}");
        
        isAuthenticated = details.success;
        StateHasChanged();

        if (details.success)
        {
            // Registration is now handled in AuthenticationForm, so we just need to handle navigation
            Console.WriteLine($"[Home] User authenticated successfully, handling navigation");
            await HandleQueryNav();
            //await CheckForNewFeatures();
        }
        else
        {
            Console.WriteLine($"[Home] Authentication failed");
        }
    }

    private async Task HandleAuthenticated(bool success)
    {
        Console.WriteLine($"[Home] HandleAuthenticated (legacy): success={success}");
        
        isAuthenticated = success;
        StateHasChanged();

        if (success)
        {
            // This is a fallback handler - registration should be handled elsewhere
            Console.WriteLine($"[Home] Legacy authentication handler - handling navigation only");
            await HandleQueryNav();
            //await CheckForNewFeatures();
        }
    }

    private async Task CheckForNewFeatures()
    {

        try
        {
            // Check if user has history (indicating they've used the app before)
            var hasHistory = (await HistoryService.GetHistoryCountAsync()) > 0;
            
            // Only show new features dialog if user has history and hasn't seen latest features
            if (hasHistory && await UserSettings.ShouldShowFeatureAnnouncementAsync())
            {
                // Add a small delay to let the page fully render
                await Task.Delay(1000);
                showNewFeaturesDialog = true;
                StateHasChanged();
            }
            else 
            {
                // if they are a new user or have seen the announcement, mark it as shown
                await UserSettings.MarkFeatureAnnouncementShownAsync();
            }
        }
        catch (Exception)
        {
            // If anything fails, silently continue without showing the dialog
        }
    }

    private void CloseNewFeaturesDialog()
    {
        showNewFeaturesDialog = false;
        StateHasChanged();
    }

    private async Task MarkNewFeaturesAsSeen()
    {
        await UserSettings.MarkFeatureAnnouncementShownAsync();
        CloseNewFeaturesDialog();
    }

    private void CloseUsageLimitDialog()
    {
        showUsageLimitDialog = false;
        usageLimitError = null;
        StateHasChanged();
    }

    private void HandleStatusUpdate(FeedbackProcessStatus status, string message)
    {
        currentStatus = status;
        currentStatusMessage = message;
        StateHasChanged();
    }

    private string? GetUserInputForSource()
    {
        return selectedSource switch
        {
            "Manual" => manualInputForm?.ContentInput,
            "Auto" => autoDataSourceForm?.GetUrls() is { } urls && urls.Any() ? string.Join(", ", urls) : null,
            _ => null
        };
    }

    private object? GetAdditionalDataForAnalysis()
    {
        // For Auto source type, extract additional data from feedbackSources
        if (selectedSource == "Auto" && feedbackSources != null)
        {
            // Combine all additional data from all sources
            var allAdditionalData = feedbackSources
                .Where(source => source.AdditionalData != null)
                .Select(source => source.AdditionalData)
                .ToList();

            // If there's only one type of data, return it directly
            if (allAdditionalData.Count == 1)
            {
                return allAdditionalData[0];
            }
            
            // If there are multiple types, return them as a list
            if (allAdditionalData.Count > 1)
            {
                return allAdditionalData;
            }
        }

        // For other source types, return the raw additional data
        return currentAdditionalData;
    }

    private string selectedSourceFinal => selectedSource.Equals("Auto", StringComparison.OrdinalIgnoreCase)
        ? GetSourcesFromUrls()
        : selectedSource;

    private string GetSourcesFromUrls()
    {
        if (autoDataSourceForm?.GetUrls() is not { } urls || !urls.Any())
            return "Auto";
            
        var sources = new List<string>();
        
        foreach (var url in urls)
        {
            if (string.IsNullOrWhiteSpace(url))
                continue;
                
            if (UrlParsing.IsYouTubeUrl(url))
                sources.Add("YouTube");
            else if (url.Contains("reddit.com"))
                sources.Add("Reddit");
            else if (url.Contains("news.ycombinator.com") || url.Contains("hackernews"))
                sources.Add("HackerNews");
            else if (url.Contains("github.com"))
                sources.Add("GitHub");
            else if (url.Contains("devblogs.microsoft.com"))
                sources.Add("DevBlogs");
            else if (url.Contains("bsky.app"))
                sources.Add("BlueSky");
            else
                sources.Add("Web");
        }
        
        // Return unique sources as comma-separated list, or "Auto" if no sources identified
        return sources.Distinct().Any() ? string.Join(", ", sources.Distinct()) : "Auto";
    }


    private async Task SubmitFeedbackRequest()
    {
        try
        {
            // Reset all previous data
            error = "";
            markdownResult = "";
            feedbackSources = null;
            currentAdditionalData = null;
            isLoading = true;
            currentStatus = FeedbackProcessStatus.GatheringComments;
            currentStatusMessage = "Starting analysis...";

            IFeedbackService service = selectedSource switch
            {
                "Auto" or "auto" => ServiceProvider.CreateAutoDataSourceService(
                    autoDataSourceForm?.GetUrls().ToArray() ?? Array.Empty<string>(),
                    HandleStatusUpdate),
                "Manual" or "manual" => ServiceProvider.CreateManualService(
                    manualInputForm?.GetContent() ?? string.Empty,
                    manualInputForm?.GetSystemPrompt(),
                    HandleStatusUpdate),
                _ => throw new InvalidOperationException("Please select a feedback source")
            };

            var (result, additionalData) = await service.GetFeedback();
            markdownResult = result;
            currentAdditionalData = additionalData;

            // Handle feedbackSources for Auto source type
            if (selectedSource == "Auto" && additionalData is List<FeedbackSourceData> sources)
            {
                feedbackSources = sources;
            }
        }
        catch (UsageLimitExceededException ex)
        {
            usageLimitError = ex.LimitError;
            showUsageLimitDialog = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Check if this is a usage limit error from error message
            if (UsageLimitErrorHelper.TryParseUsageLimitError(ex.Message, out var limitError))
            {
                usageLimitError = limitError;
                showUsageLimitDialog = true;
            }
            else
            {
                error = $"An error occurred: {ex.Message}";
            }
            StateHasChanged();
        }
        finally
        {
            await Task.Delay(500); // Give time for UI to update before finalizing
            isLoading = false;
            currentStatus = FeedbackProcessStatus.Completed;
            currentStatusMessage = "";
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"[Home] OnInitializedAsync started");
        
        var uri = new Uri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        // Check if this is an OAuth redirect (user just completed login)
        var isOAuthRedirect = !string.IsNullOrEmpty(query["code"]) || 
                             !string.IsNullOrEmpty(query["state"]) ||
                             uri.AbsolutePath.Contains("/.auth/login/");

        Console.WriteLine($"[Home] OAuth redirect detected: {isOAuthRedirect}");

        // Store auth status for later processing in OnAfterRenderAsync
        var authStatus = query["auth"];
        if (authStatus == "failed" || authStatus == "error")
        {
            Console.WriteLine($"[Home] Auth status from query: {authStatus}");
            // Store the auth error status to handle in OnAfterRenderAsync
            await Task.CompletedTask; // Placeholder - will handle in OnAfterRenderAsync
        }

        initialSource = query["source"]?.ToLower();
        initialId = query["id"];
        var url = query["url"];
        
        // If URL is provided, switch to Auto mode and use the URL
        if (!string.IsNullOrEmpty(url))
        {
            initialSource = "auto";
            initialId = url;
        }

        // Check current authentication status
        try
        {
            var currentAuthStatus = await AuthService.IsAuthenticatedAsync();
            Console.WriteLine($"[Home] Current authentication status: {currentAuthStatus}");
            
            // If this is an OAuth redirect, handle post-login registration
            if (isOAuthRedirect)
            {
                Console.WriteLine($"[Home] Processing OAuth redirect...");
                
                // Give time for OAuth tokens to settle
                await Task.Delay(500);
                
                var authStatusAfterDelay = await AuthService.IsAuthenticatedAsync();
                Console.WriteLine($"[Home] Auth status after delay: {authStatusAfterDelay}");
                
                if (authStatusAfterDelay)
                {
                    Console.WriteLine($"[Home] OAuth login detected - handling post-login registration");
                    
                    // This is a fresh OAuth login, ensure user is registered
                    try
                    {
                        var registrationSuccess = await AuthService.HandlePostLoginRegistrationAsync();
                        Console.WriteLine($"[Home] OAuth registration result: {registrationSuccess}");
                        
                        if (registrationSuccess)
                        {
                            // This is a fresh OAuth login with successful registration
                            await HandleAuthenticatedWithDetails((true, true));
                        }
                        else
                        {
                            Console.WriteLine($"[Home] OAuth registration failed - logging user out");
                            await AuthService.LogoutAsync();
                            isAuthenticated = false;
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"[Home] OAuth registration exception: {ex.Message}");
                        await AuthService.LogoutAsync();
                        isAuthenticated = false;
                    }
                }
                else
                {
                    Console.WriteLine($"[Home] OAuth redirect but user not authenticated");
                }
            }
            else if (currentAuthStatus)
            {
                // User was already authenticated (page refresh or direct navigation)
                Console.WriteLine($"[Home] User already authenticated - no registration needed");
                await HandleAuthenticatedWithDetails((true, false));
            }
            else
            {
                Console.WriteLine($"[Home] User not authenticated");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Home] Exception in OnInitializedAsync: {ex.Message}");
        }

        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Handle authentication error logging after render
            var uri = new Uri(NavigationManager.Uri);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
            var authStatus = query["auth"];
            
            if (authStatus == "failed")
            {
                // Show authentication failed message
                await JSRuntime.InvokeVoidAsync("console.log", "Authentication failed");
            }
            else if (authStatus == "error")
            {
                // Show authentication error message
                await JSRuntime.InvokeVoidAsync("console.log", "Authentication error occurred");
            }
        }
    }    
    
    private async Task HandleQueryNav()
    {
        if (string.IsNullOrEmpty(initialSource) || string.IsNullOrEmpty(initialId))
            return;

        selectedSource = initialSource.ToLower() switch
        {
            "auto" or "hackernews" or "reddit" or "youtube" => "Auto",
            _ => selectedSource
        };
        StateHasChanged();        
        if (selectedSource == "Auto")
        {
            // Wait for autoDataSourceForm to be initialized, up to 10 attempts
            var attempts = 0;
            while (autoDataSourceForm is null && attempts < 10)
            {
                await Task.Delay(250);
                attempts++;
            }

            if (autoDataSourceForm is not null)
            {
                await autoDataSourceForm.HandleUrlChange(0, initialId);
                autoDataSourceForm.RefreshUI();
                StateHasChanged();
            }
        }
    }
}
