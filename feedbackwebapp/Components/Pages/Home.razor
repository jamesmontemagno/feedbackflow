@page "/"
@* Updated to handle single URLs instead of comma-separated lists *@
@namespace FeedbackWebApp.Components.Pages

@using System.Web
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@using FeedbackWebApp.Components.Feedback.Forms
@using FeedbackWebApp.Components.Feedback.Results
@using FeedbackWebApp.Services.Interfaces
@using FeedbackWebApp.Services.Feedback
@using SharedDump.Models
@using SharedDump.Models.BlueSkyFeedback
@using SharedDump.Models.DevBlogs
@using SharedDump.Models.GitHub
@using SharedDump.Models.HackerNews
@using SharedDump.Models.Reddit
@using SharedDump.Models.YouTube

@inject IConfiguration Configuration
@inject FeedbackServiceProvider ServiceProvider
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>Feedback Analysis - FeedbackFlow</PageTitle>

<div class="container">
    @if (!isAuthenticated)
    {
        <AuthenticationForm OnAuthenticated="HandleAuthenticated" />
    }
    else
    {        
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1 class="feedbackflow-title mb-0">Analyze</h1>
            <SourceSelector @bind-SelectedSource="selectedSource" IsDisabled="@isLoading" />
        </div>

        @if (selectedSource == "Auto")
        {
            <PlatformPills />
        }

        @if (!string.IsNullOrEmpty(selectedSource))
        {            
            <div class="card shadow-sm">
                <div class="card-body">
                    @if (selectedSource.Equals("Auto", StringComparison.OrdinalIgnoreCase))
                    {
                        <AutoDataSourceForm @ref="autoDataSourceForm" IsDisabled="@isLoading" />
                    }
                    else if (selectedSource.Equals("Manual", StringComparison.OrdinalIgnoreCase))
                    {
                        <ManualFeedbackInput @ref="manualInputForm" IsDisabled="@isLoading" />
                    }

                    <SubmitButton ShowWhenSource="@selectedSource" IsLoading="@isLoading" OnSubmit="SubmitFeedbackRequest" />
                    
                    @if (isLoading)
                    {
                        <div class="alert alert-info mt-3">
                            <div class="d-flex align-items-center">
                                <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <div>
                                <strong>@currentStatus</strong>
                                <div class="small">@currentStatusMessage</div>
                            </div>
                        </div>
                    }                    
                        
                    <AnalysisResults 
                        Error="@error" 
                        MarkdownResult="@markdownResult" 
                        SourceType="@selectedSource"
                        UserInput="@GetUserInputForSource()" /> 

                    @* Display additional data from FeedbackSourceData list *@
                    @if (feedbackSources != null && feedbackSources.Any())
                    {
                        foreach (var source in feedbackSources)
                        {
                            if (source.AdditionalData != null)
                            {
                                @if (source.AdditionalData is List<YouTubeOutputVideo> videos)
                                {
                                    <YouTubeComments Videos="@videos" />
                                }
                                else if (source.AdditionalData is List<HackerNewsAnalysis> analyses)
                                {
                                    <HackerNewsResults Analyses="@analyses" />
                                }
                                else if (source.AdditionalData is List<GithubIssueModel> issues)
                                {
                                    <GitHubFeedback Issues="@issues" PullRequests="@null" Discussions="@null" />
                                }
                                else if (source.AdditionalData is List<GithubDiscussionModel> discussions)
                                {
                                    <GitHubFeedback Issues="@null" PullRequests="@null" Discussions="@discussions" />
                                }
                                else if (source.AdditionalData is List<RedditThreadModel> threads)
                                {
                                    <RedditComments Threads="@threads" />
                                }
                                else if (source.AdditionalData is DevBlogsArticleModel article)
                                {
                                    <DevBlogsFeedbackResults Article="@article" />
                                }
                                else if(source.AdditionalData is BlueSkyFeedbackResponse blueSkyFeedbackResponse)
                                {
                                    <BlueSkyFeedbackResults Response="@blueSkyFeedbackResponse" />
                                }
                            }
                        }
                    }
                </div>
            </div>
        }
    }
</div>

@code {
    private AutoDataSourceForm? autoDataSourceForm;
    private ManualFeedbackInput? manualInputForm;
    private string selectedSource = "Auto";
    private string markdownResult = "";
    private string error = "";
    private bool isLoading = false;
    private bool isAuthenticated = false;
    private List<FeedbackSourceData>? feedbackSources;
    private FeedbackProcessStatus currentStatus;
    private string currentStatusMessage = "";
    private string? initialSource;
    private string? initialId;

    private async Task HandleAuthenticated(bool success)
    {
        isAuthenticated = success;
        StateHasChanged();

        await HandleQueryNav();
    }

    private void HandleStatusUpdate(FeedbackProcessStatus status, string message)
    {
        currentStatus = status;
        currentStatusMessage = message;
        StateHasChanged();
    }    private string? GetUserInputForSource()
    {
        return selectedSource switch
        {
            "Manual" => manualInputForm?.ContentInput,
            "Auto" => autoDataSourceForm?.GetUrls().FirstOrDefault(),
            _ => null
        };
    }    private async Task SubmitFeedbackRequest()
    {
        try
        {
            // Reset all previous data
            error = "";
            markdownResult = "";
            feedbackSources = null;
            isLoading = true;

            IFeedbackService service = selectedSource switch
            {
                "Auto" or "auto" => ServiceProvider.CreateAutoDataSourceService(
                    autoDataSourceForm?.GetUrls().ToArray() ?? Array.Empty<string>(),
                    HandleStatusUpdate),
                "Manual" or "manual" => ServiceProvider.CreateManualService(
                    manualInputForm?.GetContent() ?? string.Empty,
                    manualInputForm?.GetSystemPrompt(),
                    HandleStatusUpdate),
                _ => throw new InvalidOperationException("Please select a feedback source")
            };

            var (result, additionalData) = await service.GetFeedback();
            markdownResult = result;

            // Handle feedbackSources for Auto source type
            if (selectedSource == "Auto" && additionalData is List<FeedbackSourceData> sources)
            {
                feedbackSources = sources;
            }
        }
        catch (Exception ex)
        {
            error = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            currentStatusMessage = "";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var uri = new Uri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

        initialSource = query["source"]?.ToLower();
        initialId = query["id"];
        var url = query["url"];
        
        // If URL is provided, switch to Auto mode and use the URL
        if (!string.IsNullOrEmpty(url))
        {
            initialSource = "auto";
            initialId = url;
        }

        await base.OnInitializedAsync();
    }    private async Task HandleQueryNav()
    {
        if (string.IsNullOrEmpty(initialSource) || string.IsNullOrEmpty(initialId))
            return;

        selectedSource = initialSource.ToLower() switch
        {
            "auto" or "hackernews" or "reddit" or "youtube" => "Auto",
            _ => selectedSource
        };
        StateHasChanged();        if (selectedSource == "Auto")
        {
            // Wait for autoDataSourceForm to be initialized, up to 10 attempts
            var attempts = 0;
            while (autoDataSourceForm is null && attempts < 10)
            {
                await Task.Delay(250);
                attempts++;
            }

            if (autoDataSourceForm is not null)
            {
                await autoDataSourceForm.HandleUrlChange(0, initialId);
                autoDataSourceForm.RefreshUI();
                StateHasChanged();
            }
        }
    }
}
