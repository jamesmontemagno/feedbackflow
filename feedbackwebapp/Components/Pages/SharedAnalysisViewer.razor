@page "/shared/{Id}"
@inject FeedbackWebApp.Services.Interfaces.IAnalysisSharingService SharingService
@inject IJSRuntime JSRuntime
@inject ILogger<SharedAnalysisViewer> Logger
@using SharedDump.Models
@using Markdig
@using Microsoft.JSInterop
@using Microsoft.Extensions.Logging

<PageTitle>Shared Analysis</PageTitle>

<div class="container-lg py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="shared-analysis-title mb-0">Shared Analysis</h1>
    </div>

    @if (isLoading)
    {
        <div class="loading-state">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading shared analysis...</p>
        </div>
    }
    else if (loadError)
    {
        <div class="error-state">
            <i class="bi bi-exclamation-circle"></i>
            <p>@errorMessage</p>
            <a href="/" class="btn btn-primary">Return to Home</a>
        </div>
    }
    else if (analysis == null)
    {
        <div class="empty-state">
            <i class="bi bi-search"></i>
            <p>The requested analysis could not be found.</p>
            <a href="/" class="btn btn-primary">Return to Home</a>
        </div>
    }
    else
    {
        <div class="card shadow-sm mb-4">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <div class="d-flex align-items-center gap-2">
                        <i class="bi @GetServiceIcon(analysis.SourceType) service-icon"></i>
                        <span class="source-badge">@analysis.SourceType</span>
                        <small class="text-muted">@analysis.CreatedDate.ToLocalTime().ToString("g")</small>
                    </div>
                    <div class="d-flex align-items-center gap-2">
                        <button class="btn btn-sm btn-outline-primary action-btn" title="Copy Analysis" @onclick="CopyToClipboard">
                            <i class="bi bi-clipboard"></i>
                        </button>
                    </div>
                </div>
                            
                @if (!string.IsNullOrWhiteSpace(analysis.UserInput))
                {
                    <div class="user-input mb-3">
                        <strong>Input:</strong> @analysis.UserInput
                    </div>
                }

                <div class="analysis-content">
                    <div class="content-wrapper">
                        <div class="markdown-content">
                            @((MarkupString)ConvertMarkdownToHtml(
                                !string.IsNullOrEmpty(analysis.FullAnalysis) 
                                    ? analysis.FullAnalysis 
                                    : analysis.Summary))
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string Id { get; set; } = string.Empty;

    private AnalysisData? analysis;
    private bool isLoading = true;
    private bool loadError = false;
    private string errorMessage = "An error occurred while loading the analysis.";

    protected override async Task OnInitializedAsync()
    {
        await LoadAnalysisAsync();
    }

    private async Task LoadAnalysisAsync()
    {
        try
        {
            isLoading = true;
            loadError = false;
            
            if (string.IsNullOrWhiteSpace(Id))
            {
                loadError = true;
                errorMessage = "No analysis ID provided.";
                Logger.LogWarning("Attempted to load shared analysis with empty ID");
                return;
            }

            analysis = await SharingService.GetSharedAnalysisAsync(Id);
            
            if (analysis == null)
            {
                loadError = true;
                errorMessage = "The requested analysis could not be found or has been removed.";
                Logger.LogWarning("No analysis found for ID: {Id}", Id);
            }
            else
            {
                Logger.LogInformation("Successfully loaded analysis {Id}", Id);
            }
        }
        catch (Exception ex)
        {
            loadError = true;
            errorMessage = "An error occurred while loading the analysis.";
            Logger.LogError(ex, "Error loading shared analysis {Id}", Id);
        }
        finally
        {
            isLoading = false;
        }
    }

    private string ConvertMarkdownToHtml(string markdown)
    {
        return Markdown.ToHtml(markdown ?? string.Empty, new MarkdownPipelineBuilder().UseAdvancedExtensions().Build());
    }

    private string GetServiceIcon(string sourceType)
    {
        return sourceType?.ToLowerInvariant() switch
        {
            "youtube" => "bi-youtube",
            "github" => "bi-github",
            "reddit" => "bi-reddit",
            "twitter" => "bi-twitter",
            "hackernews" => "bi-braces",
            "devblogs" => "bi-journal-code",
            "manual" => "bi-pencil-square",
            _ => "bi-question-circle"
        };
    }

    private async Task CopyToClipboard()
    {
        if (analysis == null) return;
        
        if (!string.IsNullOrEmpty(analysis.FullAnalysis))
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", analysis.FullAnalysis);
        }
        else if (!string.IsNullOrEmpty(analysis.Summary))
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", analysis.Summary);
        }
        
        // Provide feedback that the content was copied (could use a toast service if available)
    }
}