@page "/shared/{Id}"
@inject FeedbackWebApp.Services.Interfaces.IAnalysisSharingService SharingService
@inject FeedbackWebApp.Services.Interfaces.IHistoryService HistoryService
@inject FeedbackWebApp.Services.IToastService ToastService
@inject SharedDump.Services.Interfaces.IExportService ExportService
@inject IJSRuntime JSRuntime
@inject ILogger<SharedAnalysisViewer> Logger
@using SharedDump.Models
@using Markdig
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components
@using Microsoft.Extensions.Logging
@using SharedDump.Utils
@using FeedbackWebApp.Utils
@using FeedbackWebApp.Services

<PageTitle>Shared Analysis</PageTitle>

<div class="container-lg py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="feedbackflow-title mb-0">Shared Analysis</h1>        
    </div>

    @if (isLoading)
    {
        <div class="loading-state">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading shared analysis...</p>
        </div>
    }
    else if (loadError)
    {
        <div class="error-state">
            <i class="bi bi-exclamation-circle"></i>
            <p>@errorMessage</p>
            <a href="/" class="btn btn-primary">Return to Home</a>
        </div>
    }
    else if (analysis == null)
    {
        <div class="empty-state">
            <i class="bi bi-search"></i>
            <p>The requested analysis could not be found.</p>
            <a href="/" class="btn btn-primary">Return to Home</a>
        </div>
    }
    else
    {
        <div class="card shadow-sm mb-4">
            <div class="card-body">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <div class="d-flex align-items-center gap-2">
                        @{
                            var sourceTypes = analysis.SourceType.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
                            foreach (var sourceType in sourceTypes)
                            {
                                <i class="bi @GetServiceIcon(sourceType) service-icon"></i>
                            }
                            <span class="source-badge">@analysis.SourceType</span>
                        }
                        <small class="text-muted">@analysis.CreatedDate.ToLocalTime().ToString("g")</small>
                    </div>                      
                    <ActionMenu>
                        <PrimaryAction>
                            <button class="btn btn-sm btn-outline-success action-btn" title="Save to History" @onclick="SaveToHistoryAsync">
                                <i class="bi bi-bookmark-plus"></i> Save to History
                            </button>
                        </PrimaryAction>                        
                        <ChildContent>
                            <button class="btn btn-sm btn-outline-success action-btn" title="Save to History" @onclick="SaveToHistoryAsync">
                                <i class="bi bi-bookmark-plus"></i> Save to History
                            </button>
                            <button class="btn btn-sm btn-outline-primary action-btn" title="Copy Analysis" @onclick="CopyToClipboard">
                                <i class="bi bi-clipboard"></i> Copy Analysis
                            </button>
                        </ChildContent>
                        <SecondaryActions>
                            <li><button class="dropdown-item" @onclick="CopyToClipboard">
                                <i class="bi bi-clipboard"></i> Copy Analysis
                            </button></li>
                        </SecondaryActions>
                    </ActionMenu>
                </div>
                              
                @if (!string.IsNullOrWhiteSpace(analysis.UserInput))
                {
                    <div class="user-input mb-3">
                        <strong>Input:</strong>
                        @{
                            var urls = analysis.UserInput.Split(',', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);
                            if (urls.All(url => UrlParsing.IsValidUrl(url)))
                            {
                                <div class="url-list">
                                    @foreach (var url in urls)
                                    {
                                        <div class="url-item">                                            
                                            @{
                                                var isYouTube = UrlParsing.IsYouTubeUrl(url);
                                                var videoId = UrlParsing.ExtractVideoId(url);
                                                if (isYouTube && !string.IsNullOrWhiteSpace(videoId))
                                                {
                                                    <div class="youtube-thumbnail-container">
                                                        <a href="@url" target="_blank" rel="noopener noreferrer" class="d-block">
                                                            <img src="@FeedbackWebApp.Utils.UrlHelpers.GetYouTubeThumbnailUrl(videoId)" alt="YouTube Video Thumbnail" class="rounded shadow-sm" />
                                                        </a>
                                                    </div>
                                                }
                                            }
                                            <div class="url-link">
                                                <a href="@url" target="_blank" rel="noopener noreferrer">@url</a>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                @analysis.UserInput
                            }
                        }
                    </div>
                }

                <div class="analysis-content">
                    <div class="content-wrapper">
                        <div class="markdown-content">
                            @((MarkupString)ConvertMarkdownToHtml(
                                !string.IsNullOrEmpty(analysis.FullAnalysis) 
                                    ? analysis.FullAnalysis 
                                    : analysis.Summary))
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string Id { get; set; } = string.Empty;

    private AnalysisData? analysis;
    private bool isLoading = true;
    private bool loadError = false;
    private string errorMessage = "An error occurred while loading the analysis.";

    protected override async Task OnInitializedAsync()
    {
        await LoadAnalysisAsync();
    }

    private async Task LoadAnalysisAsync()
    {
        try
        {
            if(analysis is not null)
                return;

            isLoading = true;
            loadError = false;
            
            if (string.IsNullOrWhiteSpace(Id))
            {
                loadError = true;
                errorMessage = "No analysis ID provided.";
                Logger.LogWarning("Attempted to load shared analysis with empty ID");
                return;
            }

            analysis = await SharingService.GetSharedAnalysisAsync(Id);
            
            if (analysis == null)
            {
                loadError = true;
                errorMessage = "The requested analysis could not be found or has been removed.";
                Logger.LogWarning("No analysis found for ID: {Id}", Id);
            }
            else
            {
                Logger.LogInformation("Successfully loaded analysis {Id}", Id);
            }
        }
        catch (Exception ex)
        {
            loadError = true;
            errorMessage = "An error occurred while loading the analysis.";
            Logger.LogError(ex, "Error loading shared analysis {Id}", Id);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SaveToHistoryAsync()
    {
        if (analysis == null) 
            return;
        
        try
        {            
            var historyItem = new AnalysisHistoryItem
            {
                Id = Id,
                UserInput = analysis.UserInput,
                FullAnalysis = analysis.FullAnalysis, // Summary is now computed from FullAnalysis
                SourceType = analysis.SourceType,
                Timestamp = analysis.CreatedDate,
                IsShared = true,
                SharedId = Id
            };

            await HistoryService.SaveToHistoryAsync(historyItem);
            await ToastService.ShowSuccessAsync("Analysis saved to history");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving analysis to history");
            await ToastService.ShowErrorAsync("Failed to save analysis to history");
        }
    }    
    
    private string ConvertMarkdownToHtml(string markdown)
    {
        return SharedDump.Utils.MarkdownRenderer.ConvertToHtml(markdown);
    }    
    
    private string GetServiceIcon(string sourceType)
    {
        return ServiceIconHelper.GetServiceIcon(sourceType);
    }

    private async Task CopyToClipboard()
    {
        if (analysis == null) 
            return;
        
        try
        {
            string textToCopy = "";
            
            if (!string.IsNullOrEmpty(analysis.FullAnalysis))
            {
                textToCopy = analysis.FullAnalysis;
            }
            else if (!string.IsNullOrEmpty(analysis.Summary))
            {
                textToCopy = analysis.Summary;
            }
            else
            {
                await ToastService.ShowErrorAsync("Nothing to copy - no analysis or summary available.");
                return;
            }
            
            var success = await JSRuntime.InvokeAsync<bool>("copyToClipboard", textToCopy);
            if (success)
            {
                await ToastService.ShowSuccessAsync("Analysis copied to clipboard");
            }
            else
            {
                await ToastService.ShowErrorAsync("Failed to copy to clipboard. Please try again.");
            }
        }
        catch (Exception ex)
        {
            await ToastService.ShowErrorAsync($"Failed to copy to clipboard: {ex.Message}");
        }
    }
      
      private AnalysisHistoryItem ConvertToHistoryItem(AnalysisData analysis)
    {
        return new AnalysisHistoryItem
        {
            Id = analysis.Id,
            Timestamp = analysis.CreatedDate,
            FullAnalysis = analysis.FullAnalysis, // Summary is now computed from FullAnalysis
            SourceType = analysis.SourceType,
            UserInput = analysis.UserInput,
            IsShared = true,
            SharedId = Id,
            SharedDate = analysis.CreatedDate
        };
    }
    
    // IsValidUrl and GetYouTubeThumbnailUrl methods have been moved to UrlParsing class
}