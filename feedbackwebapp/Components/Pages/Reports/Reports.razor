@page "/reports"
@using FeedbackWebApp.Services
@using FeedbackWebApp.Services.Authentication
@using FeedbackWebApp.Components.Feedback.Forms
@using SharedDump.Models.Reports
@inject IReportServiceProvider ReportServiceProvider
@inject IReportRequestService ReportRequestService
@inject NavigationManager NavigationManager
@inject AuthenticationService AuthService
@inject IHistoryHelper HistoryHelper
@inject IJSRuntime JSRuntime

<PageTitle>Reports - FeedbackFlow</PageTitle>

<div class="container px-4">
    @if (!isAuthenticated)
    {
        <AuthenticationForm OnAuthenticated="HandleAuthenticated" />
    }
    else
    {
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h1 class="mt-4 feedbackflow-title mb-2">Reports</h1>
                <p class="text-muted mb-0">Reports are generated Monday morning for select communities</p>
            </div>
            <div class="d-flex gap-2">
                <a href="/reports/create" class="btn btn-primary">
                    <i class="bi bi-plus-lg me-2"></i>Create Report
                </a>
                <a href="/reports/manage" class="btn btn-outline-primary">
                    <i class="bi bi-gear me-2"></i>Manage
                </a>
            </div>
        </div>
        
        @if (reports != null && reports.Any() && HasMultipleSources)
        {
            <div class="filter-controls mb-4">
                <div class="row g-3 align-items-start">
                    <div class="col-12 col-md-4">
                        <div class="filter-group">
                            <label class="form-label">
                                <i class="bi bi-funnel me-1"></i>
                                Source
                            </label>
                            <div class="source-toggle-container">
                                <div class="btn-group w-100" role="group" aria-label="Source filter">
                                    <input type="radio" class="btn-check" name="source-filter" id="source-all" autocomplete="off" 
                                           checked="@(selectedSource == "")" @onclick="@(() => SelectSource(""))">
                                    <label class="btn btn-outline-primary" for="source-all">
                                        <i class="bi bi-collection me-1"></i>
                                        All
                                    </label>

                                    <input type="radio" class="btn-check" name="source-filter" id="source-github" autocomplete="off" 
                                           checked="@(selectedSource == "github")" @onclick="@(() => SelectSource("github"))">
                                    <label class="btn btn-outline-primary" for="source-github">
                                        <i class="bi bi-github me-1"></i> 
                                        GitHub
                                    </label>

                                    <input type="radio" class="btn-check" name="source-filter" id="source-reddit" autocomplete="off" 
                                           checked="@(selectedSource == "reddit")" @onclick="@(() => SelectSource("reddit"))">
                                    <label class="btn btn-outline-primary" for="source-reddit">
                                        <i class="bi bi-reddit me-1"></i> 
                                        Reddit
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                    @if (!string.IsNullOrEmpty(selectedSource) && FilteredSubSources.Any())
                    {
                        <div class="col-12 col-md-4">
                            <div class="filter-group">
                                <label class="form-label">
                                    <i class="bi bi-tags me-1"></i>
                                    SubSource
                                </label>
                                <div class="input-group">
                                    <span class="input-group-text">
                                        <i class="bi bi-filter"></i>
                                    </span>
                                    <select class="form-select" @bind="selectedSubSource">
                                        <option value="">All @(selectedSource) SubSources</option>
                                        @foreach (var subSource in FilteredSubSources)
                                        {
                                            <option value="@subSource">@subSource</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
            
            @if (!string.IsNullOrEmpty(selectedSource) || !string.IsNullOrEmpty(selectedSubSource))
            {
                <div class="active-filters mb-3">
                    <div class="filter-indicator">
                        <span class="filter-label">Active filters:</span>
                        @if (!string.IsNullOrEmpty(selectedSource))
                        {
                            <span class="badge filter-badge">
                                <i class="bi @(selectedSource == "github" ? "bi-github" : "bi-reddit") me-1"></i>
                                @selectedSource
                                <button type="button" class="filter-badge-close" aria-label="Clear source filter" @onclick="@(() => SelectSource(""))">
                                    <i class="bi bi-x"></i>
                                </button>
                            </span>
                        }
                        @if (!string.IsNullOrEmpty(selectedSubSource))
                        {
                            <span class="badge filter-badge">
                                <i class="bi bi-tag me-1"></i>
                                @selectedSubSource
                                <button type="button" class="filter-badge-close" aria-label="Clear subsource filter" @onclick="@(() => selectedSubSource = "")">
                                    <i class="bi bi-x"></i>
                                </button>
                            </span>
                        }
                    </div>
                </div>
            }
        }
        <div class="card mb-4">
            <div class="card-header">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <i class="bi bi-file-earmark-text me-1"></i>
                        My Reports
                    </div>
                </div>
            </div>
            <div class="card-body">
                @if (loading)
                {
                    <div class="table-responsive">
                        <table class="table table-hover align-middle reports-table loading">
                            <thead>
                                <tr>
                                    <th scope="col">Source</th>
                                    <th scope="col" class="d-none d-md-table-cell">SubSource</th>
                                    <th scope="col" class="d-none d-sm-table-cell">Date</th>
                                    <th scope="col" class="text-center">Threads</th>
                                    <th scope="col" class="d-none d-sm-table-cell text-center">Comments</th>
                                    <th scope="col" class="d-none d-lg-table-cell text-center">Period</th>
                                </tr>
                            </thead>
                            <tbody>
                                @for (int i = 0; i < 3; i++)
                                {
                                    <tr>
                                        <td>
                                            <div class="loading-placeholder source-placeholder"></div>
                                        </td>
                                        <td class="d-none d-md-table-cell">
                                            <div class="loading-placeholder subsource-placeholder"></div>
                                        </td>
                                        <td class="d-none d-sm-table-cell">
                                            <div class="loading-placeholder date-placeholder"></div>
                                        </td>
                                        <td class="text-center">
                                            <div class="loading-placeholder stat-placeholder"></div>
                                        </td>
                                        <td class="d-none d-sm-table-cell text-center">
                                            <div class="loading-placeholder stat-placeholder"></div>
                                        </td>
                                        <td class="d-none d-lg-table-cell text-center">
                                            <div class="loading-placeholder stat-placeholder"></div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else if (errorMessage != null)
                {
                    <div class="alert alert-danger">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        @errorMessage
                    </div>
                }
                else if (reports == null || !reports.Any())
                {
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle me-2"></i>
                        No reports found for your requests. <a href="/reports/create" class="alert-link">Create a report request</a> to see reports here.
                    </div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-hover align-middle reports-table">
                            <thead>
                                <tr>
                                    <th scope="col">Source</th>
                                    <th scope="col">SubSource</th>
                                    <th scope="col">Date</th>
                                    <th scope="col" class="text-center">Threads</th>
                                    <th scope="col" class="d-none d-md-table-cell text-center">Comments</th>
                                    <th scope="col" class="d-none d-lg-table-cell text-center">Period</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var report in FilteredReports)
                                {
                                    <tr class="clickable-row" @onclick="() => ViewReport(report.Id)" role="button" tabindex="0" 
                                        @onkeydown="@(async (e) => { if (e.Key == "Enter" || e.Key == " ") await Task.Run(() => ViewReport(report.Id)); })"
                                        aria-label="View report for @report.Source - @report.SubSource">
                                        <td>
                                            <span class="source-badge @report.Source.ToLowerInvariant()">
                                                <i class="bi @HistoryHelper.GetServiceIcon(report.Source) me-1"></i>
                                                @report.Source
                                            </span>
                                        </td>
                                        <td>
                                            <span class="report-sub-source">@report.SubSource</span>
                                        </td>
                                        <td>
                                            <span class="report-date">
                                                <i class="bi bi-calendar me-1"></i>
                                                @report.GeneratedAt.LocalDateTime.ToString("MMM d")
                                            </span>
                                        </td>
                                        <td class="text-center">
                                            <span class="stat-value">@report.ThreadCount</span>
                                        </td>
                                        <td class="d-none d-md-table-cell text-center">
                                            <span class="stat-value">@report.CommentCount</span>
                                        </td>
                                        <td class="d-none d-lg-table-cell text-center">
                                            <span class="stat-value">@((report.GeneratedAt - report.CutoffDate).Days) days</span>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private bool loading = false;
    private bool isAuthenticated = false;
    private IEnumerable<ReportModel>? reports;
    private string selectedSource = "";
    private string selectedSubSource = "";
    private HashSet<string> subSources = new();
    private IReportService? _reportService;
    
    private IEnumerable<string> FilteredSubSources => 
        reports?
            .Where(r => string.IsNullOrEmpty(selectedSource) || 
                       r.Source.Equals(selectedSource, StringComparison.OrdinalIgnoreCase))
            .Select(r => r.SubSource)
            .Distinct()
            .OrderBy(s => s) ?? 
        Enumerable.Empty<string>();

    private IEnumerable<ReportModel> FilteredReports =>
        reports?.Where(r =>
            (string.IsNullOrEmpty(selectedSource) || r.Source.Equals(selectedSource, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(selectedSubSource) || r.SubSource == selectedSubSource)
        ) ?? Enumerable.Empty<ReportModel>();

    private bool HasMultipleSources =>
        reports != null && 
        reports.Select(r => r.Source.ToLowerInvariant()).Distinct().Count() > 1 &&
        reports.Any(r => r.Source.Equals("github", StringComparison.OrdinalIgnoreCase)) &&
        reports.Any(r => r.Source.Equals("reddit", StringComparison.OrdinalIgnoreCase));
        
    private void SelectSource(string source)
    {
        selectedSource = source;
        selectedSubSource = ""; // Reset the subsource filter when source changes
        StateHasChanged(); // Ensure UI updates
    }

    protected override void OnInitialized()
    {
        _reportService = ReportServiceProvider.GetService();
        base.OnInitialized();
    }

    private async Task HandleAuthenticated(bool success)
    {
        isAuthenticated = success;
        if (success)
        {
            await LoadReports();
        }
    }

    private string? errorMessage;
    private async Task LoadReports()
    {
        if(loading)
            return;
            
        try
        {

            loading = true;
            errorMessage = null;
            
            // Get user's report requests from IndexedDB
            var userRequests = await JSRuntime.InvokeAsync<object[]>("window.indexedDbModule.getAllReportRequests") ?? Array.Empty<object>();
            
            if (userRequests.Any())
            {
                // Filter reports based on user requests and sort by latest first
                var filteredReports = await ReportRequestService.FilterReportsAsync(userRequests);
                reports = filteredReports.OrderByDescending(r => r.GeneratedAt);
            }
            else
            {
                // No user requests, show empty list to encourage creating requests
                reports = Enumerable.Empty<ReportModel>();
            }
            
            subSources = reports.Select(r => r.SubSource).ToHashSet();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load reports: {ex.Message}";
            reports = null;
        }
        finally
        {
            loading = false;
        }
    }
            
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isAuthenticated = await AuthService.IsAuthenticatedAsync();
            if (isAuthenticated)
            {
                await LoadReports();
                StateHasChanged();
            }
        }
    }

    private void ViewReport(Guid id)
    {
        NavigationManager.NavigateTo($"/report/{id}");
    }
}
