@page "/reports/manage"
@using FeedbackWebApp.Services
@using FeedbackWebApp.Services.Authentication
@using SharedDump.Models.Reports
@using SharedDump.Models.Account
@using SharedDump.Utils.Account
@using FeedbackWebApp.Services.Account
@inject NavigationManager NavigationManager
@inject IAuthenticationService AuthService
@inject IReportRequestService ReportRequestService
@inject IAccountServiceProvider AccountServiceProvider

<PageTitle>Manage Report Requests - FeedbackFlow</PageTitle>

<div class="container px-4">
    @if (!isAuthenticated)
    {
        <div class="card shadow-sm">
            <div class="card-body">
                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                <span>Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="row justify-content-center">
            <div class="col-12 col-lg-10">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <div>
                        <h1 class="feedbackflow-title mb-2">Manage Report Requests</h1>
                        <p class="text-muted mb-0">View and manage your report requests</p>
                    </div>
                    <button type="button" class="btn btn-primary" @onclick="OpenCreateModal">
                        <i class="bi bi-plus-lg me-2"></i>Create Report
                    </button>
                </div>

                @if (isLoading)
                {
                    <div class="text-center py-5">
                        <div class="spinner-border text-primary" role="status" style="width: 2rem; height: 2rem;">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-2 text-muted">Loading your report requests...</p>
                    </div>
                }
                else if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        @errorMessage
                    </div>
                }
                else if (reportRequests == null || !reportRequests.Any())
                {
                    <div class="card text-center">
                        <div class="card-body py-5">
                            <i class="bi bi-inbox display-4 text-muted mb-3"></i>
                            <h5 class="card-title">No Report Requests</h5>
                            <p class="card-text text-muted">You haven't created any report requests yet.</p>
                            <button type="button" class="btn btn-primary" @onclick="OpenCreateModal">
                                <i class="bi bi-plus-lg me-2"></i>Create Your First Request
                            </button>
                        </div>
                    </div>
                }
                else
                {
                    <div class="card">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <div>
                                <i class="bi bi-list-ul me-2"></i>
                                Your Report Requests (@reportRequests.Count())
                            </div>
                        </div>
                        <div class="card-body p-0">
                            @if (!string.IsNullOrEmpty(successMessage))
                            {
                                <div class="alert alert-success m-3 mb-0">
                                    <i class="bi bi-check-circle me-2"></i>
                                    @successMessage
                                </div>
                            }
                            
                            <div class="list-group list-group-flush">
                                @foreach (var request in reportRequests)
                                {
                                            <div class="list-group-item">
                                                <div class="d-flex justify-content-between align-items-start">
                                                    <div class="flex-grow-1">
                                                        <div class="d-flex align-items-center gap-2 mb-2">
                                                            @if (request.Type == "reddit")
                                                            {
                                                                <span class="badge bg-primary">
                                                                    <i class="bi bi-reddit me-1"></i>Reddit
                                                                </span>
                                                                <span class="fw-semibold">r/@request.Subreddit</span>
                                                            }
                                                            else if (request.Type == "github")
                                                            {
                                                                <span class="badge bg-dark">
                                                                    <i class="bi bi-github me-1"></i>GitHub
                                                                </span>
                                                                <span class="fw-semibold">@request.Owner/@request.Repo</span>
                                                            }
                                                            
                                                            <!-- Email notification status -->
                                                            @if (request.EmailEnabled)
                                                            {
                                                                <span class="badge bg-success" title="Email notifications enabled">
                                                                    <i class="bi bi-envelope-check me-1"></i>Email Enabled
                                                                </span>
                                                            }
                                                            else
                                                            {
                                                                <span class="badge bg-secondary" title="Email notifications disabled">
                                                                    <i class="bi bi-envelope-slash me-1"></i>No Email
                                                                </span>
                                                            }
                                                        </div>
                                                        <div class="text-muted small mb-2">
                                                            <i class="bi bi-calendar me-1"></i>
                                                            Created @GetFormattedDate(request.CreatedAt)
                                                        </div>
                                                    </div>
                                                    <div class="d-flex gap-2">
                                                        <!-- Edit email notifications button -->
                                                        @if (userAccount != null && AccountTierUtils.SupportsEmailNotifications(userAccount.Tier))
                                                        {
                                                            <button type="button" 
                                                                    class="btn btn-outline-primary btn-sm" 
                                                                    @onclick="() => EditEmailSettings(request)"
                                                                    disabled="@(deletingRequests.Contains(request.Id))">
                                                                <i class="bi bi-sliders me-1"></i>
                                                                <span>Email</span>
                                                            </button>
                                                        }
                                                        
                                                        <button type="button" 
                                                                class="btn btn-outline-danger btn-sm" 
                                                                @onclick="() => DeleteReportRequest(request.Id)"
                                                                disabled="@(deletingRequests.Contains(request.Id))">
                                                            @if (deletingRequests.Contains(request.Id))
                                                            {
                                                                <span class="spinner-border spinner-border-sm text-danger me-1" role="status" aria-hidden="true"></span>
                                                                <span>Deleting...</span>
                                                            }
                                                            else
                                                            {
                                                                <i class="bi bi-trash me-1"></i>
                                                                <span>Delete</span>
                                                            }
                                                        </button>
                                                    </div>
                                                </div>
                                            </div>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="help-section mt-4">
                        <div class="card">
                            <div class="card-header">
                                <i class="bi bi-info-circle me-2"></i>
                                About Report Requests
                            </div>
                            <div class="card-body">
                                <ul class="mb-0">
                                    <li>Report requests are stored securely in our backend with your user account</li>
                                    <li>Reports are generated automatically every Monday morning at 4 AM Pacific</li>
                                    <li>Deleting a request will remove it from our backend completely</li>
                                    <li>You can view generated reports on the <a href="/reports">Reports page</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

<CreateReportModal IsVisible="showCreateModal" 
                   IsVisibleChanged="OnCreateModalVisibilityChanged" 
                   OnReportCreated="OnReportCreated" />

<!-- Email Settings Modal -->
@if (editingEmailSettings != null)
{
    <div class="modal fade show" tabindex="-1" style="display: block;" aria-hidden="false">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-sliders me-2"></i>
                        Email Notification Settings
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseEmailSettingsModal" disabled="@isUpdatingEmailSettings"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <h6 class="text-primary">@editingEmailSettings.DisplayName</h6>
                        @if (editingEmailSettings.Type == "reddit")
                        {
                            <span class="badge bg-primary">
                                <i class="bi bi-reddit me-1"></i>Reddit
                            </span>
                        }
                        else if (editingEmailSettings.Type == "github")
                        {
                            <span class="badge bg-dark">
                                <i class="bi bi-github me-1"></i>GitHub
                            </span>
                        }
                    </div>
                    
                    <div class="mb-3">
                        <div class="form-check form-switch">
                            <input class="form-check-input" 
                                   type="checkbox" 
                                   id="editEmailNotificationsEnabled"
                                   @bind="editEmailEnabled"
                                   disabled="@isUpdatingEmailSettings">
                            <label class="form-check-label fw-bold" for="editEmailNotificationsEnabled">
                                Enable email notifications for this report
                            </label>
                        </div>
                        <small class="form-text text-muted">
                            Make sure to enable email notifications in your 
                            <a href="/account-settings" target="_blank">Account Settings</a> 
                            and set your notification preference (Individual or Weekly Digest).
                        </small>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(emailUpdateMessage))
                    {
                        <div class="alert @(emailUpdateSuccess ? "alert-success" : "alert-danger") mt-3">
                            <i class="@($"bi bi-{(emailUpdateSuccess ? "check-circle" : "exclamation-triangle")}-fill me-2")"></i>
                            @emailUpdateMessage
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" 
                            class="btn btn-outline-secondary" 
                            @onclick="CloseEmailSettingsModal"
                            disabled="@isUpdatingEmailSettings">
                        Cancel
                    </button>
                    <button type="button" 
                            class="btn btn-primary" 
                            @onclick="SaveEmailSettings"
                            disabled="@isUpdatingEmailSettings">
                        @if (isUpdatingEmailSettings)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            <span>Saving...</span>
                        }
                        else
                        {
                            <i class="bi bi-check-lg me-2"></i>
                            <span>Save Changes</span>
                        }
                    </button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private bool isAuthenticated = false;
    private bool isLoading = true;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private IEnumerable<UserReportRequestModel>? reportRequests;
    private readonly HashSet<string> deletingRequests = new();
    private bool showCreateModal = false;
    
    // User account for tier checking
    private UserAccount? userAccount;
    
    // Email settings editing
    private UserReportRequestModel? editingEmailSettings = null;
    private bool editEmailEnabled = false;
    private bool isUpdatingEmailSettings = false;
    private string emailUpdateMessage = string.Empty;
    private bool emailUpdateSuccess = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isAuthenticated = await AuthService.IsAuthenticatedAsync();
            
            if (!isAuthenticated)
            {
                // Redirect to home page for login
                NavigationManager.NavigateTo("/");
                return;
            }
            
            if (isAuthenticated)
            {
                await LoadUserAccountAsync();
                await LoadReportRequests();
            }
            else
            {
                isLoading = false;
            }
            StateHasChanged();
        }
    }

    private async Task LoadUserAccountAsync()
    {
        try
        {
            var accountService = AccountServiceProvider.GetService();
            var accountResult = await accountService.GetUserAccountAndLimitsAsync();
            
            if (accountResult.HasValue)
            {
                userAccount = accountResult.Value.account;
            }
        }
        catch (Exception ex)
        {
            // Log error but don't show to user - email feature will just be disabled
            Console.WriteLine($"Error loading user account: {ex.Message}");
        }
    }

    private async Task LoadReportRequests()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            var requests = await ReportRequestService.GetUserReportRequestsAsync();
            reportRequests = requests?.OrderByDescending(r => r.CreatedAt) ?? Enumerable.Empty<UserReportRequestModel>();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load report requests: {ex.Message}";
            reportRequests = Enumerable.Empty<UserReportRequestModel>();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task DeleteReportRequest(string id)
    {
        if (deletingRequests.Contains(id))
            return;

        try
        {
            deletingRequests.Add(id);
            errorMessage = string.Empty;
            successMessage = string.Empty;

            // Remove from backend
            var result = await ReportRequestService.RemoveReportRequestAsync(id);
            
            if (result.Success)
            {
                // Reload the list to reflect changes
                await LoadReportRequests();
                successMessage = "Report request deleted successfully.";
            }
            else
            {
                errorMessage = $"Failed to delete request: {result.ErrorMessage ?? "Unknown error occurred"}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to delete report request: {ex.Message}";
        }
        finally
        {
            deletingRequests.Remove(id);
        }
    }

    private static string GetFormattedDate(DateTimeOffset date)
    {
        var now = DateTimeOffset.Now;
        var diff = now - date;

        if (diff.TotalDays < 1)
        {
            if (diff.TotalHours < 1)
            {
                var minutes = (int)diff.TotalMinutes;
                return minutes <= 1 ? "just now" : $"{minutes} minutes ago";
            }
            var hours = (int)diff.TotalHours;
            return hours == 1 ? "1 hour ago" : $"{hours} hours ago";
        }
        
        if (diff.TotalDays < 7)
        {
            var days = (int)diff.TotalDays;
            return days == 1 ? "1 day ago" : $"{days} days ago";
        }

        return date.ToString("MMM d, yyyy");
    }

    private void OpenCreateModal()
    {
        showCreateModal = true;
    }

    private Task OnCreateModalVisibilityChanged(bool isVisible)
    {
        showCreateModal = isVisible;
        return Task.CompletedTask;
    }

    private async Task OnReportCreated()
    {
        successMessage = "Report request created successfully! Reports are generated every Monday morning.";
        await LoadReportRequests();
        StateHasChanged();
    }

    private void EditEmailSettings(UserReportRequestModel request)
    {
        editingEmailSettings = request;
        editEmailEnabled = request.EmailEnabled;
        emailUpdateMessage = string.Empty;
        emailUpdateSuccess = false;
    }

    private void CloseEmailSettingsModal()
    {
        editingEmailSettings = null;
        editEmailEnabled = false;
        emailUpdateMessage = string.Empty;
        emailUpdateSuccess = false;
        isUpdatingEmailSettings = false;
    }

    private async Task SaveEmailSettings()
    {
        if (editingEmailSettings == null)
            return;

        try
        {
            isUpdatingEmailSettings = true;
            emailUpdateMessage = string.Empty;

            // Validate email notification permissions
            var emailEnabled = editEmailEnabled;
            if (emailEnabled && (userAccount == null || !AccountTierUtils.SupportsEmailNotifications(userAccount.Tier)))
            {
                emailEnabled = false; // Silently disable for Free tier users
            }

            // Create update object for backend
            var updateData = new
            {
                emailEnabled = emailEnabled
            };

            // Update via backend
            var result = await ReportRequestService.UpdateReportRequestEmailSettingsAsync(editingEmailSettings.Id, updateData);
            
            if (result.Success)
            {
                emailUpdateMessage = "Email settings updated successfully!";
                emailUpdateSuccess = true;
                
                // Update local model
                editingEmailSettings.EmailEnabled = emailEnabled;
                
                // Refresh the list to show updated badges
                await LoadReportRequests();
                
                // Close modal after short delay
                await Task.Delay(1500);
                CloseEmailSettingsModal();
            }
            else
            {
                emailUpdateMessage = $"Failed to update email settings: {result.ErrorMessage ?? "Unknown error occurred"}";
                emailUpdateSuccess = false;
            }
        }
        catch (Exception ex)
        {
            emailUpdateMessage = $"Failed to update email settings: {ex.Message}";
            emailUpdateSuccess = false;
        }
        finally
        {
            isUpdatingEmailSettings = false;
            StateHasChanged();
        }
    }
}
