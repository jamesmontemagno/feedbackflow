@page "/reports/{source}/{subsource?}"
@using FeedbackWebApp.Services
@using FeedbackWebApp.Services.Authentication
@using FeedbackWebApp.Components.Feedback.Forms
@using FeedbackWebApp.Components.Shared
@using SharedDump.Models.Reports
@inject IReportServiceProvider ReportServiceProvider
@inject NavigationManager NavigationManager
@inject AuthenticationService AuthService
@inject IHistoryHelper HistoryHelper

<PageTitle>@GetPageTitle() - FeedbackFlow</PageTitle>

<div class="container px-4">
    @if (!isAuthenticated)
    {
        <AuthenticationForm OnAuthenticated="HandleAuthenticated" />
    }
    else if (!IsValidSource())
    {
        <div class="reports-header">
            <div class="reports-header-title">
                <h1 class="feedbackflow-title mb-2">Unsupported Source</h1>
                <p class="text-muted mb-0">Only Reddit reports are currently supported</p>
            </div>
            <a href="/reports" class="btn btn-outline-primary">
                <i class="bi bi-arrow-left me-2"></i>
                Back to All Reports
            </a>
        </div>

        <div class="card mb-4">
            <div class="card-header">
                <div>
                    <i class="bi bi-exclamation-triangle me-1"></i>
                    Source Restriction Notice
                </div>
            </div>
            <div class="card-body text-center py-5">
                <div class="mb-4">
                    <i class="bi bi-reddit text-danger" style="font-size: 4rem;"></i>
                </div>
                <h3 class="mb-3">Reddit Reports Only</h3>
                <p class="text-muted mb-4">
                    The filtered reports feature is currently limited to Reddit content only. 
                    We're working on expanding support for other platforms.
                </p>
                <div class="d-flex justify-content-center gap-3 flex-wrap">
                    <a href="/reports/reddit" class="btn btn-primary">
                        <i class="bi bi-reddit me-2"></i>
                        View Reddit Reports
                    </a>
                    <a href="/reports" class="btn btn-outline-secondary">
                        <i class="bi bi-list me-2"></i>
                        View All Reports
                    </a>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="reports-header">
            <div class="reports-header-title">
                <h1 class="feedbackflow-title mb-2">@GetPageTitle()</h1>
                <p class="text-muted mb-0">Filtered reports for specific source and subsource</p>
            </div>
            <a href="/reports" class="btn btn-outline-primary">
                <i class="bi bi-arrow-left me-2"></i>
                Back to All Reports
            </a>
        </div>

        <div class="card mb-4">
            <div class="card-header">
                <div>
                    <i class="bi bi-file-earmark-text me-1"></i>
                    @GetFilterDescription()
                </div>
            </div>
            <div class="card-body">
                @if (loading)
                {
                    <div class="table-responsive">
                        <table class="table table-hover align-middle reports-table loading">
                            <thead>
                                <tr>
                                    <th scope="col">Source</th>
                                    <th scope="col">SubSource</th>
                                    <th scope="col">Date</th>
                                    <th scope="col" class="text-center">Threads</th>
                                    <th scope="col" class="d-none d-md-table-cell text-center">Comments</th>
                                    <th scope="col" class="d-none d-lg-table-cell text-center">Period</th>
                                    <th scope="col" class="text-end">Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @for (int i = 0; i < 3; i++)
                                {
                                    <tr>
                                        <td>
                                            <div class="loading-placeholder source-placeholder"></div>
                                        </td>
                                        <td>
                                            <div class="loading-placeholder subsource-placeholder"></div>
                                        </td>
                                        <td>
                                            <div class="loading-placeholder date-placeholder"></div>
                                        </td>
                                        <td class="text-center">
                                            <div class="loading-placeholder stat-placeholder"></div>
                                        </td>
                                        <td class="d-none d-md-table-cell text-center">
                                            <div class="loading-placeholder stat-placeholder"></div>
                                        </td>
                                        <td class="d-none d-lg-table-cell text-center">
                                            <div class="loading-placeholder stat-placeholder"></div>
                                        </td>
                                        <td class="text-end">
                                            <div class="loading-placeholder button-placeholder"></div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else if (errorMessage != null)
                {
                    <div class="alert alert-danger">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        @errorMessage
                    </div>
                }
                else if (reports == null || !reports.Any())
                {
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle me-2"></i>
                        No reports found for @GetFilterDescription().
                    </div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-hover align-middle reports-table">
                            <thead>
                                <tr>
                                    <th scope="col">Source</th>
                                    <th scope="col">SubSource</th>
                                    <th scope="col">Date</th>
                                    <th scope="col" class="text-center">Threads</th>
                                    <th scope="col" class="d-none d-md-table-cell text-center">Comments</th>
                                    <th scope="col" class="d-none d-lg-table-cell text-center">Period</th>
                                    <th scope="col" class="text-end">Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var report in reports)
                                {
                                    <tr>
                                        <td>
                                            <span class="source-badge">
                                                <i class="bi @HistoryHelper.GetServiceIcon(report.Source) me-1"></i>
                                                @report.Source
                                            </span>
                                        </td>
                                        <td>
                                            <span class="report-sub-source">@report.SubSource</span>
                                        </td>
                                        <td>
                                            <span class="report-date">
                                                <i class="bi bi-calendar me-1"></i>
                                                @report.GeneratedAt.LocalDateTime.ToString("MMM d")
                                            </span>
                                        </td>
                                        <td class="text-center">
                                            <span class="stat-value">@report.ThreadCount</span>
                                        </td>
                                        <td class="d-none d-md-table-cell text-center">
                                            <span class="stat-value">@report.CommentCount</span>
                                        </td>
                                        <td class="d-none d-lg-table-cell text-center">
                                            <span class="stat-value">@((report.GeneratedAt - report.CutoffDate).Days) days</span>
                                        </td>
                                        <td class="text-end">
                                            <button class="btn btn-action" @onclick="() => ViewReport(report.Id)" aria-label="View Report">
                                                <i class="bi bi-box-arrow-up-right"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public string Source { get; set; } = string.Empty;
    [Parameter] public string? Subsource { get; set; }

    private bool loading = true;
    private bool isAuthenticated = false;
    private IEnumerable<ReportModel>? reports;
    private string? errorMessage;
    private IReportService? _reportService;

    protected override void OnInitialized()
    {
        _reportService = ReportServiceProvider.GetService();
        base.OnInitialized();
    }

    private bool IsValidSource()
    {
        return !string.IsNullOrEmpty(Source) && 
               Source.Equals("reddit", StringComparison.OrdinalIgnoreCase);
    }

    private async Task HandleAuthenticated(bool success)
    {
        isAuthenticated = success;
        if (success && IsValidSource())
        {
            await LoadReports();
        }
    }

    private async Task LoadReports()
    {
        if (!IsValidSource())
        {
            return;
        }
        
        try
        {
            loading = true;
            errorMessage = null;
            reports = await _reportService!.ListReportsAsync(Source, Subsource);
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load reports: {ex.Message}";
            reports = null;
        }
        finally
        {
            loading = false;
        }
    }
            
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isAuthenticated = await AuthService.IsAuthenticatedAsync();
            if (isAuthenticated && IsValidSource())
            {
                await LoadReports();
                StateHasChanged();
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (isAuthenticated && IsValidSource())
        {
            await LoadReports();
        }
    }

    private void ViewReport(Guid id)
    {
        NavigationManager.NavigateTo($"/report/{id}");
    }

    private string GetPageTitle()
    {
        if (string.IsNullOrEmpty(Subsource))
            return $"{Source} Reports";
        return $"{Source} / {Subsource} Reports";
    }

    private string GetFilterDescription()
    {
        if (string.IsNullOrEmpty(Subsource))
            return $"Source: {Source}";
        return $"Source: {Source}, SubSource: {Subsource}";
    }
}