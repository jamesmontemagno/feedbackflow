@page "/reports"
@using FeedbackWebApp.Services
@using FeedbackWebApp.Services.Authentication
@using FeedbackWebApp.Components.Feedback.Forms
@using SharedDump.Models.Reports
@inject IReportServiceProvider ReportServiceProvider
@inject NavigationManager NavigationManager
@inject AuthenticationService AuthService
@inject IHistoryHelper HistoryHelper

<PageTitle>Reports - FeedbackFlow</PageTitle>

<div class="container px-4">
    @if (!isAuthenticated)
    {
        <AuthenticationForm OnAuthenticated="HandleAuthenticated" />
    }
    else
    {
        <h1 class="mt-4 feedbackflow-title">Reports</h1>
        <p class="text-muted mb-4">Reports are generated Monday morning for select communities</p>
        
        @if (reports != null && reports.Any())
        {
            <div class="filter-controls mb-4">
                <div class="row g-3">
                    <div class="col-12 col-md-4">
                        <div class="filter-group">
                            <label class="form-label">SubSource</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="bi bi-filter"></i>
                                </span>
                                <select class="form-select" @bind="selectedSubSource">
                                    <option value="">All SubSources</option>
                                    @foreach (var subSource in subSources)
                                    {
                                        <option value="@subSource">@subSource</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
        <div class="card mb-4">
            <div class="card-header">
                <div>
                    <i class="bi bi-file-earmark-text me-1"></i>
                    Available Reports
                </div>
            </div>
            <div class="card-body">
                @if (loading)
                {
                    <div class="table-responsive">
                        <table class="table table-hover align-middle reports-table loading">
                            <thead>
                                <tr>
                                    <th scope="col">Source</th>
                                    <th scope="col" class="d-none d-md-table-cell">SubSource</th>
                                    <th scope="col" class="d-none d-sm-table-cell">Date</th>
                                    <th scope="col" class="text-center">Threads</th>
                                    <th scope="col" class="d-none d-sm-table-cell text-center">Comments</th>
                                    <th scope="col" class="d-none d-lg-table-cell text-center">Period</th>
                                    <th scope="col" class="text-end">Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @for (int i = 0; i < 3; i++)
                                {
                                    <tr>
                                        <td>
                                            <div class="loading-placeholder source-placeholder"></div>
                                        </td>
                                        <td class="d-none d-md-table-cell">
                                            <div class="loading-placeholder subsource-placeholder"></div>
                                        </td>
                                        <td class="d-none d-sm-table-cell">
                                            <div class="loading-placeholder date-placeholder"></div>
                                        </td>
                                        <td class="text-center">
                                            <div class="loading-placeholder stat-placeholder"></div>
                                        </td>
                                        <td class="d-none d-sm-table-cell text-center">
                                            <div class="loading-placeholder stat-placeholder"></div>
                                        </td>
                                        <td class="d-none d-lg-table-cell text-center">
                                            <div class="loading-placeholder stat-placeholder"></div>
                                        </td>
                                        <td class="text-end">
                                            <div class="loading-placeholder button-placeholder"></div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else if (errorMessage != null)
                {
                    <div class="alert alert-danger">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        @errorMessage
                    </div>
                }
                else if (reports == null || !reports.Any())
                {
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle me-2"></i>
                        No reports found.
                    </div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-hover align-middle reports-table">
                            <thead>
                                <tr>
                                    <th scope="col">Source</th>
                                    <th scope="col">SubSource</th>
                                    <th scope="col">Date</th>
                                    <th scope="col" class="text-center">Threads</th>
                                    <th scope="col" class="d-none d-md-table-cell text-center">Comments</th>
                                    <th scope="col" class="d-none d-lg-table-cell text-center">Period</th>
                                    <th scope="col" class="text-end">Action</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var report in FilteredReports)
                                {
                                    <tr>
                                        <td>
                                            <a href="/reports/@Uri.EscapeDataString(report.Source)" class="source-link text-decoration-none">
                                                <span class="source-badge">
                                                    <i class="bi @HistoryHelper.GetServiceIcon(report.Source) me-1"></i>
                                                    @report.Source
                                                </span>
                                            </a>
                                        </td>
                                        <td>
                                            <a href="/reports/@Uri.EscapeDataString(report.Source)/@Uri.EscapeDataString(report.SubSource)" class="subsource-link text-decoration-none">
                                                <span class="report-sub-source">@report.SubSource</span>
                                            </a>
                                        </td>
                                        <td>
                                            <span class="report-date">
                                                <i class="bi bi-calendar me-1"></i>
                                                @report.GeneratedAt.LocalDateTime.ToString("MMM d")
                                            </span>
                                        </td>
                                        <td class="text-center">
                                            <span class="stat-value">@report.ThreadCount</span>
                                        </td>
                                        <td class="d-none d-md-table-cell text-center">
                                            <span class="stat-value">@report.CommentCount</span>
                                        </td>
                                        <td class="d-none d-lg-table-cell text-center">
                                            <span class="stat-value">@((report.GeneratedAt - report.CutoffDate).Days) days</span>
                                        </td>
                                        <td class="text-end">
                                            <button class="btn btn-action" @onclick="() => ViewReport(report.Id)" aria-label="View Report">
                                                <i class="bi bi-box-arrow-up-right"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private bool loading = true;
    private bool isAuthenticated = false;
    private IEnumerable<ReportModel>? reports;
    private string selectedSubSource = "";
    private HashSet<string> subSources = new();
    private IReportService? _reportService;

    private IEnumerable<ReportModel> FilteredReports =>
        reports?.Where(r =>
            (string.IsNullOrEmpty(selectedSubSource) || r.SubSource == selectedSubSource)
        ) ?? Enumerable.Empty<ReportModel>();

    protected override void OnInitialized()
    {
        _reportService = ReportServiceProvider.GetService();
        base.OnInitialized();
    }

    private async Task HandleAuthenticated(bool success)
    {
        isAuthenticated = success;
        if (success)
        {
            await LoadReports();
        }
    }

    private string? errorMessage;
    private async Task LoadReports()
    {
        try
        {
            loading = true;
            errorMessage = null;
            reports = await _reportService!.ListReportsAsync();
            subSources = reports.Select(r => r.SubSource).ToHashSet();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load reports: {ex.Message}";
            reports = null;
        }
        finally
        {
            loading = false;
        }
    }
            
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isAuthenticated = await AuthService.IsAuthenticatedAsync();
            if (isAuthenticated)
            {
                await LoadReports();
                StateHasChanged();
            }
        }
    }

    private void ViewReport(Guid id)
    {
        NavigationManager.NavigateTo($"/report/{id}");
    }
}
