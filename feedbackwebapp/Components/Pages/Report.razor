@page "/report/{Id}"
@using FeedbackWebApp.Services
@using SharedDump.Models.Reports
@using System.Text.RegularExpressions
@inject IReportServiceProvider ReportServiceProvider
@inject NavigationManager NavigationManager
@inject IHistoryHelper HistoryHelper

<PageTitle>Report Details - FeedbackFlow</PageTitle>

<div class="container-lg py-4">
    <div class="page-header">
        <div class="d-flex justify-content-between align-items-center">
            <h1 class="page-title">
                @(report?.Source ?? "Loading") Report
            </h1>
            <button class="btn btn-outline-secondary btn-sm back-button" @onclick="GoBack">
                <i class="bi bi-arrow-left me-2"></i>Back to Reports
            </button>
        </div>
    </div>  

    @if (loading)
    {
        <div class="loading-container">
        <div class="loading-spinner">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="loading-text">Loading report details...</p>
            </div>
        </div>
    }
    else if (report == null)
    {
        <div class="error-container">
            <div class="alert alert-danger error-alert">
                <div class="d-flex align-items-center">
                    <i class="bi bi-exclamation-triangle-fill error-icon"></i>
                    <div>
                        <h5 class="mb-1">Report Not Found</h5>
                        <p class="mb-0">The requested report could not be found or may have been removed.</p>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {               
        <!-- Report Summary Pills -->
        <div class="report-summary mb-3">
            <div class="report-summary-pills">
                <span class="report-pill source-pill">
                    <i class="bi @HistoryHelper.GetServiceIcon(report.Source)"></i>
                    @report.Source
                </span>
                <span class="report-pill">
                    <i class="bi bi-hash"></i>
                    @report.SubSource
                </span>
                <span class="report-pill">
                    <i class="bi bi-chat-square-text"></i>
                    @report.ThreadCount.ToString("N0") threads
                </span>
                <span class="report-pill">
                    <i class="bi bi-chat-dots"></i>
                    @report.CommentCount.ToString("N0") comments
                </span>
                <span class="report-pill">
                    <i class="bi bi-calendar-range"></i>
                    @report.CutoffDate.LocalDateTime.ToString("MMM d") - 
                    @report.GeneratedAt.LocalDateTime.ToString("MMM d, yyyy")
                </span>
            </div>
        </div>
        
        <!-- Report Content Card -->
        <div class="card report-content-card">
            <div class="card-header report-content-header">
                <h5 class="card-title mb-0">
                    <i class="bi bi-file-text me-2"></i>
                    Analysis Report
                </h5>
            </div>
            <div class="card-body report-content">
                @((MarkupString)ProcessHtmlAnchors(ProcessHtmlCss(report.HtmlContent)))
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string Id { get; set; } = string.Empty;

    private bool loading = true;
    private ReportModel? report;
    private IReportService? _reportService;

    private async Task GoBack()
    {
        await Task.Run(() => NavigationManager.NavigateTo("reports"));
    }

    protected override void OnInitialized()
    {
        _reportService = ReportServiceProvider.GetService();
        base.OnInitialized();
    }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Id))
        {
            NavigationManager.NavigateTo("/reports");
            return;
        }

        try
        {
            loading = true;
            report = await _reportService!.GetReportAsync(Id);
            
            if (report != null)
            {
                var content = ProcessHtmlAnchors(report.HtmlContent);
                content = ProcessHtmlCss(content);
                // Process HTML content to fix anchor links and clean CSS
                report.HtmlContent = content;
            }
        }
        finally
        {
            loading = false;
        }
    }
    
    /// <summary>
    /// Processes HTML content to remove specific CSS properties from the body style
    /// </summary>
    private string ProcessHtmlCss(string htmlContent)
    {
        if (string.IsNullOrEmpty(htmlContent))
            return htmlContent;

        // Remove body style block entirely
        htmlContent = Regex.Replace(htmlContent, @"<style[^>]*>.*?body\s*{[^}]+}.*?</style>", m =>
        {
            // Remove only the body style, keep other styles
            var style = m.Value;
            var bodyPattern = @"body\s*{[^}]+}";
            style = Regex.Replace(style, bodyPattern, "");
            return style;
        }, RegexOptions.Singleline);

        // Remove inline body style attribute if present
        htmlContent = Regex.Replace(htmlContent, @"<body[^>]*style=""[^\\""]*""", match =>
        {
            // Remove style attribute from <body>
            return Regex.Replace(match.Value, "style=\"[^\"]*\"", "");
        });

        // Replace hardcoded color/background-color in classes with CSS variables for dark mode support
        var colorMap = new Dictionary<string, string>
        {
            { "#333", "var(--text-primary)" },
            { "#FF4500", "var(--primary-color)" },
            { "#f8f9fa", "var(--bg-secondary)" },
            { "#fff", "var(--bg-secondary)" },
            { "#1a1a1b", "var(--text-primary)" },
            { "#7c7c7c", "var(--text-secondary)" },
            { "#f0f8ff", "var(--info-color)" },
            { "#eee", "var(--border-color)" },
            { "#fff3e0", "var(--warning-color)" },
            { "#0366d6", "var(--primary-color)" },
            { "#0255b3", "var(--primary-hover)" }
        };

        foreach (var kvp in colorMap)
        {
            htmlContent = htmlContent.Replace(kvp.Key, kvp.Value);
        }

        return htmlContent;
    }

    /// <summary>
    /// Processes HTML content to fix anchor links that only contain hash (#) references
    /// by ensuring they include the current page URL
    /// </summary>
    private string ProcessHtmlAnchors(string htmlContent)
    {
        if (string.IsNullOrEmpty(htmlContent))
            return htmlContent;
            
        // Get the current page URL without hash fragment
        var currentUrl = NavigationManager.Uri;
        if (currentUrl.Contains('#'))
            currentUrl = currentUrl.Substring(0, currentUrl.IndexOf('#'));
            
        // Regex to find <a> tags with href that starts with # but doesn't contain a full URL
        var pattern = "<a\\s+(?:[^>]*?\\s+)?href\\s*=\\s*([\"'])\\s*(#[^\"']+)\\s*\\1";
        
        return Regex.Replace(htmlContent, pattern, match => {
            // Extract the hash fragment
            var hash = match.Groups[2].Value;
            // Replace the hash-only href with full URL + hash
            return match.Value.Replace(hash, $"{currentUrl}{hash}");
        });
    }
}
