@page "/admin/reports"
@using FeedbackWebApp.Services
@using FeedbackWebApp.Services.Authentication
@using FeedbackWebApp.Services.Account
@using SharedDump.Models.Reports
@using SharedDump.Models.Account
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@inject FeedbackWebApp.Services.IAdminReportConfigService AdminReportConfigService
@inject IAuthenticationService AuthService
@inject IAccountServiceProvider AccountServiceProvider
@inject IToastService ToastService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

@namespace FeedbackWebApp.Components.Pages

<PageTitle>Admin Reports - FeedbackFlow</PageTitle>

<div class="container my-4">
    @if (isLoading)
    {
        <div class="text-center py-4">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2 text-muted">Loading admin reports...</p>
        </div>
    }
    else if (!isAdmin)
    {
        <div class="alert alert-danger" role="alert">
            <i class="bi bi-shield-exclamation me-2"></i>
            <strong>Access Denied:</strong> This page is only available to administrators.
        </div>
    }
    else
    {
        <div class="d-flex justify-content-between align-items-center mb-4 admin-header">
            <div>
                <h1 class="feedbackflow-title mb-2">
                    <i class="bi bi-gear-fill me-2"></i>
                    Admin Reports
                </h1>
                <p class="text-muted mb-0">Manage automated report configurations for administrators</p>
            </div>
            <button class="btn btn-primary btn-create-report" @onclick="ShowCreateModal">
                <i class="bi bi-plus-circle me-2"></i>
                New Report Config
            </button>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                <i class="bi bi-exclamation-triangle me-2"></i>
                @errorMessage
            </div>
        }

        @if (configs.Any())
        {
            <div class="table-container">
                <table class="table admin-reports-table">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Type</th>
                            <th>Source</th>
                            <th class="mobile-hide">Email Recipient</th>
                            <th>Status</th>
                            <th class="mobile-hide">Created</th>
                            <th class="mobile-hide">Last Processed</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var config in configs)
                        {
                            <tr>
                                <td>
                                    <div class="report-name">@config.Name</div>
                                </td>
                                <td>
                                    <span class="report-type-badge report-type-@(config.Type.ToLower())">@config.Type</span>
                                </td>
                                <td>
                                    @if (config.Type == "reddit")
                                    {
                                        <div class="report-source">
                                            <i class="bi bi-reddit reddit-icon"></i>
                                            <span>r/@config.Subreddit</span>
                                        </div>
                                    }
                                    else if (config.Type == "github")
                                    {
                                        <div class="report-source">
                                            <i class="bi bi-github github-icon"></i>
                                            <span>@config.Owner/@config.Repo</span>
                                        </div>
                                    }
                                </td>
                                <td class="mobile-hide">
                                    <div class="report-email">@config.EmailRecipient</div>
                                </td>
                                <td>
                                    @if (config.IsActive)
                                    {
                                        <span class="status-badge status-active">
                                            <i class="bi bi-check-circle"></i>
                                            Active
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="status-badge status-inactive">
                                            <i class="bi bi-pause-circle"></i>
                                            Inactive
                                        </span>
                                    }
                                </td>
                                <td class="mobile-hide">
                                    <div class="report-date">@config.CreatedAt.ToString("MMM dd, yyyy")</div>
                                </td>
                                <td class="mobile-hide">
                                    @if (config.LastProcessedAt.HasValue)
                                    {
                                        <div class="report-date">@config.LastProcessedAt.Value.ToString("MMM dd, yyyy")</div>
                                    }
                                    else
                                    {
                                        <div class="report-date report-date-never">Never</div>
                                    }
                                </td>
                                <td>
                                    <div class="action-buttons">
                                        <button class="btn action-btn action-btn-edit" @onclick="() => EditConfig(config)" title="Edit Configuration">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                        <button class="btn action-btn action-btn-delete" @onclick="() => DeleteConfig(config)" title="Delete Configuration">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="empty-state">
                <i class="bi bi-inbox empty-state-icon"></i>
                <h4>No Admin Reports Configured</h4>
                <p>Create your first automated report configuration to get started.</p>
                <button class="btn btn-primary btn-create-report" @onclick="ShowCreateModal">
                    <i class="bi bi-plus-circle me-2"></i>
                    Create First Report Config
                </button>
            </div>
        }
    }
</div>

<!-- Create/Edit Modal -->
@if (showModal)
{
    <div class="modal fade show admin-modal" style="display: block;" tabindex="-1">
        <div class="modal-backdrop fade show"></div>
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @if (editingConfig == null)
                        {
                            <text><i class="bi bi-plus-circle me-2"></i>Create New Report Config</text>
                        }
                        else
                        {
                            <text><i class="bi bi-pencil me-2"></i>Edit Report Config</text>
                        }
                    </h5>
                    <button type="button" class="btn-close" @onclick="HideModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@currentConfig" OnValidSubmit="SaveConfig">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="mb-3">
                            <label class="form-label">Report Name <span class="text-danger">*</span></label>
                            <InputText @bind-Value="currentConfig.Name" class="form-control" placeholder="e.g., Weekly Feedback Report" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Report Type <span class="text-danger">*</span></label>
                            <InputSelect @bind-Value="currentConfig.Type" class="form-select" @onchange="OnTypeChanged">
                                <option value="">Select report type...</option>
                                <option value="reddit">Reddit</option>
                                <option value="github">GitHub</option>
                            </InputSelect>
                        </div>

                        @if (currentConfig.Type == "reddit")
                        {
                            <div class="mb-3">
                                <label class="form-label">Subreddit <span class="text-danger">*</span></label>
                                <InputText @bind-Value="currentConfig.Subreddit" class="form-control" placeholder="e.g., dotnet" />
                                <div class="form-text">Enter the subreddit name without the "r/" prefix</div>
                                @if (string.IsNullOrWhiteSpace(currentConfig.Subreddit))
                                {
                                    <div class="text-danger">Subreddit is required for Reddit reports</div>
                                }
                            </div>
                        }
                        else if (currentConfig.Type == "github")
                        {
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Owner <span class="text-danger">*</span></label>
                                    <InputText @bind-Value="currentConfig.Owner" class="form-control" placeholder="e.g., microsoft" />
                                    @if (string.IsNullOrWhiteSpace(currentConfig.Owner))
                                    {
                                        <div class="text-danger">Owner is required for GitHub reports</div>
                                    }
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label">Repository <span class="text-danger">*</span></label>
                                    <InputText @bind-Value="currentConfig.Repo" class="form-control" placeholder="e.g., dotnet" />
                                    @if (string.IsNullOrWhiteSpace(currentConfig.Repo))
                                    {
                                        <div class="text-danger">Repository is required for GitHub reports</div>
                                    }
                                </div>
                            </div>
                        }

                        <div class="mb-3">
                            <label class="form-label">Email Recipient <span class="text-danger">*</span></label>
                            <InputText @bind-Value="currentConfig.EmailRecipient" type="email" class="form-control" placeholder="admin@company.com" />
                            <div class="form-text">Email address where the report will be sent</div>
                        </div>

                        <div class="mb-3">
                            <div class="form-check">
                                <InputCheckbox @bind-Value="currentConfig.IsActive" class="form-check-input" id="isActiveCheck" />
                                <label class="form-check-label" for="isActiveCheck">
                                    Active (report will be generated and sent)
                                </label>
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="HideModal">Cancel</button>
                            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                }
                                @if (editingConfig == null)
                                {
                                    <span>Create Report Config</span>
                                }
                                else
                                {
                                    <span>Update Report Config</span>
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool isLoading = true;
    private bool isAdmin = false;
    private string errorMessage = string.Empty;
    private List<AdminReportConfigModel> configs = new();

    private bool showModal = false;
    private bool isSaving = false;
    private AdminReportConfigModel? editingConfig = null;
    private AdminReportConfigModel currentConfig = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            // Check if user is authenticated and is admin.
            var isAuthenticated = await AuthService.IsAuthenticatedAsync();
            if (!isAuthenticated)
            {
                Navigation.NavigateTo("/");
                return;
            }

            // Check admin status
            var accountService = AccountServiceProvider.GetService();
            var accountResult = await accountService.GetUserAccountAndLimitsAsync();
            if (accountResult.HasValue)
            {
                isAdmin = accountResult.Value.account?.Tier == AccountTier.Admin;
            }
            else
            {
                isAdmin = false;
            }

            if (isAdmin)
            {
                await LoadConfigs();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading admin reports: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadConfigs()
    {
        try
        {
            configs = await AdminReportConfigService.GetAllConfigsAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading report configurations: {ex.Message}";
        }
    }

    private void ShowCreateModal()
    {
        editingConfig = null;
        currentConfig = new AdminReportConfigModel { IsActive = true };
        showModal = true;
    }

    private void EditConfig(AdminReportConfigModel config)
    {
        editingConfig = config;
        currentConfig = new AdminReportConfigModel
        {
            Id = config.Id,
            Name = config.Name,
            Type = config.Type,
            Subreddit = config.Subreddit,
            Owner = config.Owner,
            Repo = config.Repo,
            EmailRecipient = config.EmailRecipient,
            IsActive = config.IsActive,
            ETag = config.ETag
        };
        showModal = true;
    }

    private void HideModal()
    {
        showModal = false;
        editingConfig = null;
        currentConfig = new();
    }

    private void OnTypeChanged(ChangeEventArgs e)
    {
        var newType = e.Value?.ToString();
        if (newType != currentConfig.Type)
        {
            // Clear type-specific fields when type changes
            currentConfig.Subreddit = string.Empty;
            currentConfig.Owner = string.Empty;
            currentConfig.Repo = string.Empty;
        }
    }

    private async Task SaveConfig()
    {
        try
        {
            isSaving = true;
            errorMessage = string.Empty;

            // Basic validation
            if (string.IsNullOrWhiteSpace(currentConfig.Name))
            {
                errorMessage = "Report name is required.";
                await ToastService.ShowErrorAsync("Report name is required");
                return;
            }

            if (string.IsNullOrWhiteSpace(currentConfig.Type))
            {
                errorMessage = "Report type is required.";
                await ToastService.ShowErrorAsync("Report type is required");
                return;
            }

            if (string.IsNullOrWhiteSpace(currentConfig.EmailRecipient))
            {
                errorMessage = "Email recipient is required.";
                await ToastService.ShowErrorAsync("Email recipient is required");
                return;
            }

            // Type-specific validation
            if (currentConfig.Type == "reddit" && string.IsNullOrWhiteSpace(currentConfig.Subreddit))
            {
                errorMessage = "Subreddit is required for Reddit reports.";
                await ToastService.ShowErrorAsync("Subreddit is required for Reddit reports");
                return;
            }

            if (currentConfig.Type == "github" && 
                (string.IsNullOrWhiteSpace(currentConfig.Owner) || string.IsNullOrWhiteSpace(currentConfig.Repo)))
            {
                errorMessage = "Owner and Repository are required for GitHub reports.";
                await ToastService.ShowErrorAsync("Owner and Repository are required for GitHub reports");
                return;
            }

            if (editingConfig == null)
            {
                // Create new config
                var createdConfig = await AdminReportConfigService.CreateConfigAsync(currentConfig);
                configs.Add(createdConfig);
                await ToastService.ShowSuccessAsync("Report configuration created successfully!");
            }
            else
            {
                // Update existing config
                var updatedConfig = await AdminReportConfigService.UpdateConfigAsync(currentConfig);
                var index = configs.FindIndex(c => c.Id == updatedConfig.Id);
                if (index >= 0)
                {
                    configs[index] = updatedConfig;
                }
                await ToastService.ShowSuccessAsync("Report configuration updated successfully!");
            }

            HideModal();
        }
        catch (Exception ex)
        {
            var detailedError = ex.InnerException?.Message ?? ex.Message;
            errorMessage = $"Error saving report configuration: {detailedError}";
            await ToastService.ShowErrorAsync($"Failed to save: {detailedError}");
            
            // Log detailed error information to console for debugging
            Console.WriteLine($"SaveConfig Error Details:");
            Console.WriteLine($"  Message: {ex.Message}");
            Console.WriteLine($"  InnerException: {ex.InnerException?.Message}");
            Console.WriteLine($"  StackTrace: {ex.StackTrace}");
            if (ex.InnerException != null)
            {
                Console.WriteLine($"  InnerException StackTrace: {ex.InnerException.StackTrace}");
            }
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task DeleteConfig(AdminReportConfigModel config)
    {
        try
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
                $"Are you sure you want to delete the report configuration '{config.Name}'? This action cannot be undone.");
                
            if (confirmed)
            {
                var success = await AdminReportConfigService.DeleteConfigAsync(config.Id);
                if (success)
                {
                    configs.Remove(config);
                    await ToastService.ShowSuccessAsync("Report configuration deleted successfully!");
                }
                else
                {
                    await ToastService.ShowErrorAsync("Failed to delete report configuration");
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting report configuration: {ex.Message}";
            await ToastService.ShowErrorAsync("Failed to delete report configuration");
            
            // Log detailed error information to console for debugging
            Console.WriteLine($"DeleteConfig Error Details:");
            Console.WriteLine($"  Message: {ex.Message}");
            Console.WriteLine($"  InnerException: {ex.InnerException?.Message}");
            Console.WriteLine($"  StackTrace: {ex.StackTrace}");
            if (ex.InnerException != null)
            {
                Console.WriteLine($"  InnerException StackTrace: {ex.InnerException.StackTrace}");
            }
        }
    }
}