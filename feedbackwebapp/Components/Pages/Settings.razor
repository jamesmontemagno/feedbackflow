@page "/settings"
@using SharedDump.Utils
@using System.Threading
@inject UserSettingsService UserSettings
@inject IJSRuntime JSRuntime
@inject ISpeechSynthesisService SpeechSynthesisService
@inject ILogger<Settings> Logger
@inject IToastService ToastService

<PageTitle>Settings - FeedbackFlow</PageTitle>

<div class="container py-4">    
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="feedbackflow-title mb-0">Settings</h1>
        @if (settings != null && hasUnsavedChanges)
        {
            <button class="btn btn-outline-secondary" @onclick="ResetAllChanges" disabled="@(!hasUnsavedChanges)">
                <i class="bi bi-arrow-counterclockwise me-1"></i>
                Reset Changes
            </button>
        }
    </div>

    @if (settings != null)
    {
        <div class="row">
            <div class="col-md-6 mb-4">
                <div class="card shadow-sm">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Analysis Settings</h5>
                    </div>
                    <div class="card-body">
                        <div class="form-floating mb-3">
                            <input type="number" class="form-control" id="maxComments" min="100" max="5000"
                                @bind="MaxCommentsToAnalyze" @bind:event="oninput" />
                            <label for="maxComments">Maximum Comments to Analyze</label>
                            <div class="text-muted small">
                                Default: 1200. Analyzing more comments will take longer but provide more comprehensive
                                results.
                            </div>
                        </div>

                        <div class="form-check form-switch custom-switch">
                            <input class="form-check-input" type="checkbox" role="switch" id="useCustomPrompts" @bind="UseCustomPrompts"
                                @bind:event="oninput">
                            <label class="form-check-label" for="useCustomPrompts">
                                Use Custom Analysis Prompts
                            </label>
                            <div class="text-muted small">
                                Enable to use custom prompts instead of the default ones.
                            </div>
                        </div>

                        <div class="card-footer">
                            <SaveButton OnSave="SaveSettings" IsSaving="@isSaving" IsDisabled="@(!hasUnsavedChanges)"
                                ClassNames="save-button" />
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-md-6 mb-4">
                <div class="card shadow-sm">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Text-to-Speech Settings</h5>
                    </div>
                    <div class="card-body"> @if (availableVoices == null)
                        {
                            <div class="text-center py-2">
                                <div class="spinner-border spinner-border-sm" role="status">
                                    <span class="visually-hidden">Loading voices...</span>
                                </div>
                                <span class="ms-2">Loading available voices...</span>
                            </div>
                        }
                                        else if (availableVoices.Length == 0)
                        {
                            <div class="alert alert-warning">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <i class="bi bi-exclamation-triangle-fill me-2"></i>
                                        No voices available. Text-to-speech may not be supported in your browser.
                                    </div>
                                    <button class="btn btn-sm btn-outline-primary" @onclick="RetryLoadVoices">
                                        <i class="bi bi-arrow-clockwise me-1"></i>
                                        Retry
                                    </button>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="mb-3">
                                <label class="form-label">Preferred Voice</label> <select class="form-select"
                                    @bind="PreferredVoice" @bind:event="onchange">
                                    <option value="">Default (Auto-select best voice)</option>

                                    @{
                                        // First display the en-US languages at the top
                                        var enUsVoices = availableVoices.Where(v => v.Lang == "en-US").ToList();
                                        if (enUsVoices.Any())
                                        {
                                            <optgroup label="@LanguageUtils.GetLanguageName("en-US")">
                                                @foreach (var voice in enUsVoices.OrderBy(v => v.Name))
                                                {
                                                    <option value="@voice.VoiceURI">@voice.Name</option>
                                                }
                                            </optgroup>
                                        }

                                        // Then display the rest of the languages
                                        foreach (var voiceGroup in availableVoices
                                        .Where(v => v.Lang != "en-US")
                                        .GroupBy(v => v.Lang)
                                        .OrderBy(g => LanguageUtils.GetLanguageName(g.Key)))
                                        {
                                            <optgroup label="@LanguageUtils.GetLanguageName(voiceGroup.Key)">
                                                @foreach (var voice in voiceGroup.OrderBy(v => v.Name))
                                                {
                                                    <option value="@voice.VoiceURI">@voice.Name</option>
                                                }
                                            </optgroup>
                                        }
                                    }
                                </select>
                                <div class="text-muted small mt-1">
                                    Choose a voice for the text-to-speech feature. If none is selected, the system will
                                    automatically choose the best available voice.
                                </div>
                                <div class="mt-3">
                                    <button class="btn btn-sm btn-outline-secondary" @onclick="PlayVoiceDemo">
                                        <i class="bi bi-volume-up me-1"></i>
                                        Test Selected Voice
                                    </button>
                                </div>
                            </div>
                        }

                        <div class="card-footer">
                            <SaveButton OnSave="SaveSettings" IsSaving="@isSaving" IsDisabled="@(!hasUnsavedChanges)"
                                ClassNames="save-button" />
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-12 mb-4">
                <div class="card shadow-sm @(!UseCustomPrompts ? "opacity-50" : "")">
                    <div class="card-header">
                        <h5 class="card-title mb-0">Analysis Prompts</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            @if (!UseCustomPrompts)
                            {
                                <div class="alert alert-info">
                                    Enable custom prompts in the settings above to modify these values.
                                </div>
                            }
                        </div>
                        <fieldset disabled="@(!UseCustomPrompts)">
                            <div class="mb-4">
                                <label class="form-label d-flex justify-content-between">
                                    <span>YouTube Analysis Prompt</span>
                                    <button class="btn btn-sm btn-outline-secondary"
                                        @onclick="@(() => ResetPrompt("youtube"))">Reset to Default</button>
                                </label>
                                <textarea class="form-control font-monospace" rows="6" @bind="YouTubePrompt"
                                    @bind:event="oninput"></textarea>
                            </div>

                            <div class="mb-4">
                                <label class="form-label d-flex justify-content-between">
                                    <span>GitHub Analysis Prompt</span>
                                    <button class="btn btn-sm btn-outline-secondary"
                                        @onclick="@(() => ResetPrompt("github"))">Reset to Default</button>
                                </label>
                                <textarea class="form-control font-monospace" rows="6" @bind="GitHubPrompt"
                                    @bind:event="oninput"></textarea>
                            </div>

                            <div class="mb-4">
                                <label class="form-label d-flex justify-content-between">
                                    <span>Hacker News Analysis Prompt</span>
                                    <button class="btn btn-sm btn-outline-secondary"
                                        @onclick="@(() => ResetPrompt("hackernews"))">Reset to Default</button>
                                </label>
                                <textarea class="form-control font-monospace" rows="6" @bind="HackerNewsPrompt"
                                    @bind:event="oninput"></textarea>
                            </div>

                            <div class="mb-4">
                                <label class="form-label d-flex justify-content-between">
                                    <span>Reddit Analysis Prompt</span>
                                    <button class="btn btn-sm btn-outline-secondary"
                                        @onclick="@(() => ResetPrompt("reddit"))">Reset to Default</button>
                                </label>
                                <textarea class="form-control font-monospace" rows="6" @bind="RedditPrompt"
                                    @bind:event="oninput"></textarea>
                            </div>

                            <div class="mb-4">
                                <label class="form-label d-flex justify-content-between">
                                    <span>DevBlogs Analysis Prompt</span>
                                    <button class="btn btn-sm btn-outline-secondary"
                                        @onclick="@(() => ResetPrompt("devblogs"))">Reset to Default</button>
                                </label>
                                <textarea class="form-control font-monospace" rows="6" @bind="DevBlogsPrompt"
                                    @bind:event="oninput"></textarea>
                            </div>

                            <div class="mb-4">
                                <label class="form-label d-flex justify-content-between">
                                    <span>Twitter Analysis Prompt</span>
                                    <button class="btn btn-sm btn-outline-secondary"
                                        @onclick="@(() => ResetPrompt("twitter"))">Reset to Default</button>
                                </label>
                                <textarea class="form-control font-monospace" rows="6" @bind="TwitterPrompt"
                                    @bind:event="oninput"></textarea>
                            </div>

                            <div class="mb-4">
                                <label class="form-label d-flex justify-content-between">
                                    <span>BlueSky Analysis Prompt</span>
                                    <button class="btn btn-sm btn-outline-secondary"
                                        @onclick="@(() => ResetPrompt("bluesky"))">Reset to Default</button>
                                </label>
                                <textarea class="form-control font-monospace" rows="6" @bind="BlueSkyPrompt"
                                    @bind:event="oninput"></textarea>
                            </div>
                        </fieldset>

                        <div class="card-footer">
                            <SaveButton OnSave="SaveSettings" IsSaving="@isSaving" IsDisabled="@(!hasUnsavedChanges)"
                                ClassNames="save-button" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
</div>

@code {

    private UserSettingsService.UserSettings? settings;
    private bool isSaving;
    private bool hasUnsavedChanges;
    private VoiceInfo[]? availableVoices;

    // Backing fields for settings properties
    private bool _useCustomPrompts;
    private string? _preferredVoice;
    private int _maxCommentsToAnalyze = 1200;
    private Dictionary<string, string> _servicePrompts = new();

    internal record VoiceInfo(
    string Name = "",
    string Lang = "",
    string VoiceURI = "",
    bool IsDefault = false)
    {
        public static implicit operator VoiceInfo(SpeechSynthesisVoice voice) =>
        new(voice.Name, voice.Lang, voice.VoiceURI, voice.Default);
    }

    private bool UseCustomPrompts
    {
        get => _useCustomPrompts;
        set
        {
            if (_useCustomPrompts != value)
            {
                _useCustomPrompts = value;
                hasUnsavedChanges = true;
            }
        }
    }

    private string? PreferredVoice
    {
        get => _preferredVoice;
        set
        {
            if (_preferredVoice != value)
            {
                _preferredVoice = value;
                hasUnsavedChanges = true;
            }
        }
    }

    private int MaxCommentsToAnalyze
    {
        get => _maxCommentsToAnalyze;
        set
        {
            if (_maxCommentsToAnalyze != value)
            {
                _maxCommentsToAnalyze = value;
                hasUnsavedChanges = true;
            }
        }
    }

    private string YouTubePrompt
    {
        get => _servicePrompts.GetValueOrDefault("youtube", "");
        set
        {
            if (_servicePrompts.GetValueOrDefault("youtube", "") != value)
            {
                _servicePrompts["youtube"] = value;
                hasUnsavedChanges = true;
            }
        }
    }

    private string GitHubPrompt
    {
        get => _servicePrompts.GetValueOrDefault("github", "");
        set
        {
            if (_servicePrompts.GetValueOrDefault("github", "") != value)
            {
                _servicePrompts["github"] = value;
                hasUnsavedChanges = true;
            }
        }
    }

    private string HackerNewsPrompt
    {
        get => _servicePrompts.GetValueOrDefault("hackernews", "");
        set
        {
            if (_servicePrompts.GetValueOrDefault("hackernews", "") != value)
            {
                _servicePrompts["hackernews"] = value;
                hasUnsavedChanges = true;
            }
        }
    }

    private string RedditPrompt
    {
        get => _servicePrompts.GetValueOrDefault("reddit", "");
        set
        {
            if (_servicePrompts.GetValueOrDefault("reddit", "") != value)
            {
                _servicePrompts["reddit"] = value;
                hasUnsavedChanges = true;
            }
        }
    }

    private string DevBlogsPrompt
    {
        get => _servicePrompts.GetValueOrDefault("devblogs", "");
        set
        {
            if (_servicePrompts.GetValueOrDefault("devblogs", "") != value)
            {
                _servicePrompts["devblogs"] = value;
                hasUnsavedChanges = true;
            }
        }
    }

    private string TwitterPrompt
    {
        get => _servicePrompts.GetValueOrDefault("twitter", "");
        set
        {
            if (_servicePrompts.GetValueOrDefault("twitter", "") != value)
            {
                _servicePrompts["twitter"] = value;
                hasUnsavedChanges = true;
            }
        }
    }

    private string BlueSkyPrompt
    {
        get => _servicePrompts.GetValueOrDefault("bluesky", "");
        set
        {
            if (_servicePrompts.GetValueOrDefault("bluesky", "") != value)
            {
                _servicePrompts["bluesky"] = value;
                hasUnsavedChanges = true;
            }
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Logger.LogInformation("On first render");

            await LoadSettings();

            // Load voices with timeout
            await RetryLoadVoices();
        }
        else
        {
            Logger.LogInformation("On non-first render");
        }
    }
    private async Task LoadSettings()
    {
        settings = await UserSettings.GetSettingsAsync();

        // Initialize backing fields from settings
        if (settings != null)
        {
            _useCustomPrompts = settings.UseCustomPrompts;
            _preferredVoice = settings.PreferredVoice;
            _maxCommentsToAnalyze = settings.MaxCommentsToAnalyze;

            // Initialize service prompts
            _servicePrompts = new Dictionary<string, string>(settings.ServicePrompts);
        }

        hasUnsavedChanges = false;
        StateHasChanged();
    }
    private async Task LoadVoices()
    {
        try
        {
            Logger.LogInformation("Loading text-to-speech voices");

            // Get voices using the SpeechSynthesisService
            var voices = await SpeechSynthesisService.GetVoicesAsync();

            // Convert to our VoiceInfo class and filter out voices with "Online" in the name
            availableVoices = voices?.Where(v => !v.Name.Contains("Online", StringComparison.OrdinalIgnoreCase))
            .Select(v => (VoiceInfo)v)
            .ToArray() ?? [];

            Logger.LogInformation("Loaded {VoiceCount} text-to-speech voices", availableVoices.Length);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading voices");
            availableVoices = [];
        }
    }
    private async Task RetryLoadVoices()
    {
        try
        {
            // Set to null to show loading indicator
            availableVoices = null;

            // Force UI update
            StateHasChanged();

            // Wait a moment to ensure UI updates
            await Task.Delay(500);

            // Create a cancellation token with timeout
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));

            // Try to load voices again with timeout
            var loadTask = Task.Run(async () => await LoadVoices(), cts.Token);

            try
            {
                // Wait for load to complete or timeout
                await loadTask;

                // Update UI
                StateHasChanged();

                // Show a success message if voices were loaded
                if (availableVoices != null && availableVoices.Length > 0)
                {
                    await ToastService.ShowSuccessAsync("Text-to-speech voices loaded successfully!");
                }
            }
            catch (OperationCanceledException)
            {
                Logger.LogWarning("Voice loading timed out after 10 seconds");
                availableVoices = []; // Empty array to show the retry button
                StateHasChanged();
                await ToastService.ShowWarningAsync("Voice loading timed out. Please try again.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during retry load voices");
            availableVoices = []; // Empty array to show the retry button
            StateHasChanged();
        }
    }

    private async Task PlayVoiceDemo()
    {
        if (string.IsNullOrEmpty(PreferredVoice))
        {
            await JSRuntime.InvokeVoidAsync("alert", "Please select a voice to test.");
            return;
        }

        const string demoText = "This is a test of the selected voice. If you can hear this, the voice is working correctly.";

        // Create utterance with the demo text
        var utterance = new SpeechSynthesisUtterance
        {
            Text = demoText,
            Rate = 1.0f,
            Pitch = 1.0f
        };

        // Set the selected voice
        var voices = await SpeechSynthesisService.GetVoicesAsync();
        var selectedVoice = voices.FirstOrDefault(v => v.VoiceURI == PreferredVoice);

        if (selectedVoice != null)
        {
            utterance.Voice = selectedVoice;
        }

        // Cancel any ongoing speech
        await SpeechSynthesisService.CancelAsync();

        // Speak the text
        await SpeechSynthesisService.SpeakAsync(utterance);
    }
    private async Task SaveSettings()
    {
        if (settings == null) return;

        try
        {
            isSaving = true;

            // Apply all local values to the settings object
            settings.UseCustomPrompts = _useCustomPrompts;
            settings.PreferredVoice = _preferredVoice;
            settings.MaxCommentsToAnalyze = _maxCommentsToAnalyze;

            // Apply service prompts
            foreach (var key in _servicePrompts.Keys)
            {
                settings.ServicePrompts[key] = _servicePrompts[key];
            } // Save to persistent storage
            await UserSettings.SaveSettingsAsync(settings);
            hasUnsavedChanges = false;

            // Show a toast or notification
            await ToastService.ShowSuccessAsync("Settings saved successfully!");
        }
        finally
        {
            isSaving = false;
        }
    }
    private void ResetPrompt(string serviceType)
    {
        if (settings == null) return;

        _servicePrompts[serviceType] = SharedDump.AI.FeedbackAnalyzerService.GetServiceSpecificPrompt(serviceType);
        hasUnsavedChanges = true;
        StateHasChanged();
    }

    private void ResetAllPrompts()
    {
        if (settings == null) return;

        foreach (var serviceType in settings.ServicePrompts.Keys.ToList())
        {
            _servicePrompts[serviceType] = SharedDump.AI.FeedbackAnalyzerService.GetServiceSpecificPrompt(serviceType);
        }
        hasUnsavedChanges = true;
        StateHasChanged();
    }

    public void Dispose()
    {
        // Cleanup if needed
    }

    /// <summary>
    /// Discards all current edits and reloads settings from storage
    /// </summary>
    private async Task ResetAllChanges()
    {
        await LoadSettings();
    }
}