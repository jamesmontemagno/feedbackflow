@page "/history"
@inject FeedbackWebApp.Services.Interfaces.IHistoryService HistoryService
@inject IJSRuntime JSRuntime
@using SharedDump.Models
@using Markdig
@using Microsoft.JSInterop

<PageTitle>Analysis History</PageTitle>

<div class="container-lg py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="history-title mb-0">Analysis History</h1>
        @if (historyItems is { Count: > 0 })
        {
            <button class="btn btn-danger clear-all-btn px-4 py-2" @onclick="ClearHistory">
                <i class="bi bi-trash me-2"></i>Clear All History
            </button>
        }
    </div>
    
    @if (historyItems is { Count: > 0 })
    {
        <div class="filter-section card mb-4 p-3 shadow-sm">
            <div class="row g-3">
                <div class="col-md-6">
                    <label for="dateFilter" class="form-label">Date Range</label>                    
                    <select class="form-select" id="dateFilter" @bind="dateFilter" @bind:after="StateHasChanged">
                        <option value="all">All Time</option>
                        <option value="today">Today</option>
                        <option value="week">Last 7 Days</option>
                        <option value="month">Last 30 Days</option>
                    </select>
                </div>
                <div class="col-md-6">
                    <label for="sourceFilter" class="form-label">Service Type</label>                    
                    <select class="form-select" id="sourceFilter" @bind="sourceFilter" @bind:after="StateHasChanged">
                        <option value="all">All Services</option>
                        <option value="YouTube">YouTube</option>
                        <option value="GitHub">GitHub</option>
                        <option value="Reddit">Reddit</option>
                        <option value="Twitter">Twitter</option>
                        <option value="HackerNews">HackerNews</option>
                        <option value="DevBlogs">DevBlogs</option>
                        <option value="Manual">Manual</option>
                    </select>
                </div>
            </div>
        </div>
    }

    @if (historyItems is null)
    {
        <div class="loading-state">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading history...</p>
        </div>
    }
    else if (!historyItems.Any())
    {
        <div class="empty-state">
            <i class="bi bi-clock-history"></i>
            <p>No analysis history found.</p>
        </div>
    }    
    else if (filteredItems is { Count: > 0 })
    {
        <div class="list-group">
            @foreach (var item in filteredItems)
            {
                <div class="list-group-item" @key="item.Id">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <div class="d-flex align-items-center">
                            <i class="bi @GetServiceIcon(item.SourceType) service-icon me-2"></i>
                            <span class="badge bg-accent me-2">@item.SourceType</span>
                            <small class="text-muted">@item.Timestamp.ToLocalTime().ToString("g")</small>
                        </div>                        
                        <button class="btn btn-sm btn-outline-danger" title="Delete" @onclick="() => ConfirmDelete(item.Id)">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>                    
                    <div class="d-flex align-items-center mb-2">
                        <button class="expand-button @(expandedItems.Contains(item.Id) ? "expanded" : "")" @onclick="() => ToggleExpand(item.Id)">
                            <i class="bi @(expandedItems.Contains(item.Id) ? "bi-chevron-down" : "bi-chevron-right")"></i>
                            <span>View Analysis</span>
                        </button>
                    </div>

                    @if (!string.IsNullOrWhiteSpace(item.UserInput))
                    {
                        <div class="text-muted small mb-2">
                            <strong>Input:</strong> @item.UserInput
                        </div>
                    }

                    @if (expandedItems.Contains(item.Id))
                    {
                        <div class="border-start border-4 border-accent ps-3 mt-3">
                            <div class="markdown-body">
                                @((MarkupString)ConvertMarkdownToHtml(item.Summary))
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>

@code {
    private List<AnalysisHistoryItem>? historyItems;
    private List<AnalysisHistoryItem>? filteredItems => FilterHistoryItems();
    private HashSet<string> expandedItems = new();
    private string dateFilter = "all";
    private string sourceFilter = "all";


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Re-fetch in case we were prerendering and couldn't access localStorage
            historyItems = await HistoryService.GetHistoryAsync();
            StateHasChanged();
        }
    }

    private async Task DeleteItem(string id)
    {
        await HistoryService.DeleteHistoryItemAsync(id);
        historyItems = await HistoryService.GetHistoryAsync();
        expandedItems.Remove(id);
    }    
    
    private async Task ClearHistory()
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to clear all history? This cannot be undone."))
        {
            await HistoryService.ClearHistoryAsync();
            historyItems = new();
            expandedItems.Clear();
        }
    }

    private void ToggleExpand(string id)
    {
        if (!expandedItems.Add(id))
        {
            expandedItems.Remove(id);
        }
    }    
    
    private string ConvertMarkdownToHtml(string markdown)
    {
        return Markdown.ToHtml(markdown ?? string.Empty, new MarkdownPipelineBuilder().UseAdvancedExtensions().Build());
    }    
    
    private string GetServiceIcon(string sourceType)
    {
        return sourceType?.ToLowerInvariant() switch
        {
            "youtube" => "bi-youtube",
            "github" => "bi-github",
            "reddit" => "bi-reddit",
            "twitter" => "bi-twitter",
            "hackernews" => "bi-braces",
            "devblogs" => "bi-journal-code",
            "manual" => "bi-pencil-square",
            _ => "bi-question-circle"
        };
    }
    
    private List<AnalysisHistoryItem> FilterHistoryItems()
    {
        if (historyItems == null)
            return new List<AnalysisHistoryItem>();
            
        var items = historyItems.AsEnumerable();
        
        // Apply source filter
        if (sourceFilter != "all")
            items = items.Where(x => x.SourceType == sourceFilter);
            
        // Apply date filter
        var now = DateTime.Now;
        items = dateFilter switch
        {
            "today" => items.Where(x => x.Timestamp.Date == now.Date),
            "week" => items.Where(x => (now - x.Timestamp).TotalDays <= 7),
            "month" => items.Where(x => (now - x.Timestamp).TotalDays <= 30),
            _ => items // "all" or any other value
        };
        
        return items.ToList();
    }    private void OpenAnalysis(AnalysisHistoryItem item)
    {
        // In a real implementation, you might navigate to a details page
        // or open a modal with the full analysis
        ToggleExpand(item.Id); // For now, just expand the item
    }
    
    private void ResetFilters()
    {
        dateFilter = "all";
        sourceFilter = "all";
    }

    private async Task ConfirmDelete(string id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this item? This cannot be undone."))
        {
            await DeleteItem(id);
        }
    }
}
