@page "/history"
@inject FeedbackWebApp.Services.Interfaces.IHistoryService HistoryService
@using SharedDump.Models
@using Markdig

<PageTitle>Analysis History</PageTitle>

<div class="history-container">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="history-title mb-0">Analysis History</h1>
        @if (historyItems is { Count: > 0 })
        {
            <button class="btn btn-danger clear-all-btn px-4 py-2" @onclick="ClearHistory">
                <i class="bi bi-trash me-2"></i>Clear All History
            </button>
        }
    </div>

    @if (historyItems is null)
    {
        <div class="loading-state">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading history...</p>
        </div>
    }
    else if (!historyItems.Any())
    {
        <div class="empty-state">
            <i class="bi bi-clock-history"></i>
            <p>No analysis history found.</p>
        </div>
    }
    else
    {
        <div class="history-cards">
            @foreach (var item in historyItems)
            {                <div class="card mt-4 shadow-sm" @key="item.Id">
                    <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                        <div class="d-flex align-items-center">
                            <span class="source-badge-label me-2">@item.SourceType</span>
                            <span class="timestamp">@item.Timestamp.ToLocalTime().ToString("g")</span>
                        </div>
                        <button class="btn btn-sm btn-outline-light" title="Delete" @onclick="() => DeleteItem(item.Id)">
                            <i class="bi bi-trash me-1"></i>
                            Delete
                        </button>
                    </div>
                    
                    <div class="card-body p-4">
                        @if (!string.IsNullOrWhiteSpace(item.UserInput))
                        {
                            <div class="user-input mb-4">
                                <span class="user-input-label">User Input:</span>
                                <p>@item.UserInput</p>
                            </div>
                        }                        <div class="summary-section">
                            <button class="summary-toggle-btn w-100 mb-3 d-flex align-items-center justify-content-between @(expandedItems.Contains(item.Id) ? "expanded" : "")"
                                    @onclick="() => ToggleExpand(item.Id)">
                                <div class="d-flex align-items-center">
                                    <i class="bi @(expandedItems.Contains(item.Id) ? "bi-chevron-down" : "bi-chevron-right") me-2"></i>
                                    <span>Analysis Summary</span>
                                </div>
                                <i class="bi bi-file-text"></i>
                            </button>
                            
                            @if (expandedItems.Contains(item.Id))
                            {
                                <div class="markdown-body summary-content">
                                    @((MarkupString)ConvertMarkdownToHtml(item.Summary))
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private List<AnalysisHistoryItem>? historyItems;
    private HashSet<string> expandedItems = new();    protected override async Task OnInitializedAsync()
    {
        historyItems = await HistoryService.GetHistoryAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Re-fetch in case we were prerendering and couldn't access localStorage
            historyItems = await HistoryService.GetHistoryAsync();
            StateHasChanged();
        }
    }

    private async Task DeleteItem(string id)
    {
        await HistoryService.DeleteHistoryItemAsync(id);
        historyItems = await HistoryService.GetHistoryAsync();
        expandedItems.Remove(id);
    }

    private async Task ClearHistory()
    {
        await HistoryService.ClearHistoryAsync();
        historyItems = new();
        expandedItems.Clear();
    }

    private void ToggleExpand(string id)
    {
        if (!expandedItems.Add(id))
        {
            expandedItems.Remove(id);
        }
    }

    private string ConvertMarkdownToHtml(string markdown)
    {
        return Markdown.ToHtml(markdown ?? string.Empty, new MarkdownPipelineBuilder().UseAdvancedExtensions().Build());
    }
}
