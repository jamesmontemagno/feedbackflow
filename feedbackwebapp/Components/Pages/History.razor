@page "/history"
@inject FeedbackWebApp.Services.Interfaces.IHistoryService HistoryService
@inject FeedbackWebApp.Services.Interfaces.IAnalysisSharingService SharingService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using SharedDump.Models
@using Markdig
@using Microsoft.JSInterop
@inject FeedbackWebApp.Services.IToastService ToastService

<PageTitle>Analysis History</PageTitle>

<div class="container-lg py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="history-title mb-0">Analysis History</h1>
        @if (historyItems is { Count: > 0 })
        {
            <button class="btn btn-danger clear-all-btn action-btn px-4 py-2" @onclick="ClearHistory">
                <i class="bi bi-trash me-2"></i>Clear All History
            </button>
        }
    </div>
      @if (historyItems is { Count: > 0 })
    {
        <div class="filter-section card mb-4 p-3 shadow-sm">
            <div class="row g-3">
                <div class="col-12 mb-2">
                    <label for="searchFilter" class="form-label">Search Analysis Content</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-search"></i></span>
                        <input type="text" class="form-control" id="searchFilter" placeholder="Search through analysis content..." 
                               @bind="searchTerm" @bind:event="oninput" @bind:after="StateHasChanged" />                        @if (!string.IsNullOrWhiteSpace(searchTerm))
                        {
                            <button class="btn btn-outline-secondary action-btn" type="button" @onclick="ClearSearch">
                                <i class="bi bi-x-circle"></i>
                            </button>
                        }
                    </div>
                </div>
                <div class="col-md-6">
                    <label for="dateFilter" class="form-label">Date Range</label>                    
                    <select class="form-select" id="dateFilter" @bind="dateFilter" @bind:after="StateHasChanged">
                        <option value="all">All Time</option>
                        <option value="today">Today</option>
                        <option value="week">Last 7 Days</option>
                        <option value="month">Last 30 Days</option>
                    </select>
                </div>
                <div class="col-md-6">
                    <label for="sourceFilter" class="form-label">Service Type</label>                    
                    <select class="form-select" id="sourceFilter" @bind="sourceFilter" @bind:after="StateHasChanged">
                        <option value="all">All Services</option>
                        <option value="YouTube">YouTube</option>
                        <option value="GitHub">GitHub</option>
                        <option value="Reddit">Reddit</option>
                        <option value="Twitter">Twitter</option>
                        <option value="HackerNews">HackerNews</option>
                        <option value="DevBlogs">DevBlogs</option>
                        <option value="Manual">Manual</option>
                    </select>
                </div>
            </div>
        </div>
    }

    @if (historyItems is null)
    {
        <div class="loading-state">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading history...</p>
        </div>
    }
    else if (!historyItems.Any())
    {
        <div class="empty-state">
            <i class="bi bi-clock-history"></i>
            <p>No analysis history found.</p>
        </div>
    }    
    else if (filteredItems is { Count: > 0 })
    {
        <div class="list-group">
            @foreach (var item in filteredItems)
            {
                <div class="list-group-item" @key="item.Id">
                <div class="d-flex justify-content-between align-items-center mb-3">
                        <div class="d-flex align-items-center gap-2">
                            <i class="bi @GetServiceIcon(item.SourceType) service-icon"></i>
                            <span class="source-badge">@item.SourceType</span>
                            <small class="text-muted">@item.Timestamp.ToLocalTime().ToString("g")</small>
                        </div>                        <div class="d-flex align-items-center gap-2">
                            <button class="btn btn-sm btn-outline-primary action-btn" title="Copy Analysis" @onclick="() => CopyToClipboard(item)">
                                <i class="bi bi-clipboard"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-info action-btn" title="Share Analysis" @onclick="() => ShareAnalysis(item)">
                                <i class="bi bi-share"></i>
                            </button>
                            @if(item.SourceType != "Manual")
                            {
                                <a class="btn btn-sm btn-outline-primary action-btn" title="Open Source" target="_blank" rel="noopener noreferrer" href="@GetSourceUrl(item)">
                                    <i class="bi bi-box-arrow-up-right"></i>
                                </a>
                            }
                            <button class="btn btn-sm btn-outline-danger action-btn" title="Delete" @onclick="() => ConfirmDelete(item.Id)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </div>
                                
                    @if (!string.IsNullOrWhiteSpace(item.UserInput) && item.SourceType != "Manual")
                    {
                        <div class="user-input mb-3">
                            <strong>Input:</strong> @item.UserInput
                        </div>
                    }
                      <div class="analysis-content">
                        <button class="btn btn-sm mb-3 action-btn @(expandedItems.Contains(item.Id) ? "btn-outline-secondary" : "btn-outline-primary")" 
                                @onclick="() => ToggleExpand(item.Id)">
                            <i class="bi @(expandedItems.Contains(item.Id) ? "bi-chevron-down" : "bi-chevron-right") me-1"></i>
                            @(expandedItems.Contains(item.Id) ? "Show Summary" : "Show Full Analysis")
                        </button>
                        
                        <div class="content-wrapper">
                            @if (expandedItems.Contains(item.Id) && !string.IsNullOrEmpty(item.FullAnalysis))
                            {
                                <div class="analysis-badge mb-2">Full Analysis</div>
                            }
                            <div class="markdown-content">
                                @((MarkupString)ConvertMarkdownToHtml(
                                    expandedItems.Contains(item.Id) && !string.IsNullOrEmpty(item.FullAnalysis) 
                                        ? item.FullAnalysis 
                                        : item.Summary))
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<ShareAnalysisModal 
    IsVisible="@isShareModalVisible" 
    IsVisibleChanged="@((value) => isShareModalVisible = value)" 
    IsSharing="@isSharing" 
    IsSharingChanged="@((value) => isSharing = value)"
    ShareLink="@shareLink"
    ShareLinkChanged="@((value) => shareLink = value)"
    Error="@shareError"
    ErrorChanged="@((value) => shareError = value)"
    OnRetryShare="@ShareSelectedAnalysis" />

@code {    private List<AnalysisHistoryItem>? historyItems;
    private List<AnalysisHistoryItem>? filteredItems => FilterHistoryItems();
    private HashSet<string> expandedItems = new();
    private string dateFilter = "all";
    private string sourceFilter = "all";
    private string searchTerm = string.Empty;
    
    // Share functionality
    private bool isShareModalVisible = false;
    private bool isSharing = false;
    private string shareLink = string.Empty;
    private string shareError = string.Empty;
    private AnalysisHistoryItem? selectedAnalysis;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Re-fetch in case we were prerendering and couldn't access localStorage
            historyItems = await HistoryService.GetHistoryAsync();
            StateHasChanged();
        }
    }

    private async Task DeleteItem(string id)
    {
        await HistoryService.DeleteHistoryItemAsync(id);
        historyItems = await HistoryService.GetHistoryAsync();
        expandedItems.Remove(id);
    }    
    
    private async Task ClearHistory()
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to clear all history? This cannot be undone."))
        {
            await HistoryService.ClearHistoryAsync();
            historyItems = new();
            expandedItems.Clear();
        }
    }

    private void ToggleExpand(string id)
    {
        if (!expandedItems.Add(id))
        {
            expandedItems.Remove(id);
        }
    }    
    
    private string ConvertMarkdownToHtml(string markdown)
    {
        return Markdown.ToHtml(markdown ?? string.Empty, new MarkdownPipelineBuilder().UseAdvancedExtensions().Build());
    }    
    
    private string GetServiceIcon(string sourceType)
    {
        return sourceType?.ToLowerInvariant() switch
        {
            "youtube" => "bi-youtube",
            "github" => "bi-github",
            "reddit" => "bi-reddit",
            "twitter" => "bi-twitter",
            "hackernews" => "bi-braces",
            "devblogs" => "bi-journal-code",
            "manual" => "bi-pencil-square",
            _ => "bi-question-circle"
        };
    }

    private string GetSourceUrl(AnalysisHistoryItem item)
    {
        // Format the URL based on the source type and item.Id
        return item.SourceType?.ToLowerInvariant() switch
        {
            "youtube" => $"https://youtube.com/watch?v={item.Id}",
            "github" => $"https://github.com/{item.Id}",
            "reddit" => $"https://reddit.com/{item.Id}",
            "twitter" => $"https://twitter.com/i/web/status/{item.Id}",
            "hackernews" => $"https://news.ycombinator.com/item?id={item.Id}",
            "devblogs" => $"https://devblogs.microsoft.com/{item.Id}",
            _ => "#"
        };
    }
      private List<AnalysisHistoryItem> FilterHistoryItems()
    {
        if (historyItems == null)
            return new List<AnalysisHistoryItem>();
            
        var items = historyItems.AsEnumerable();
        
        // Apply source filter
        if (sourceFilter != "all")
            items = items.Where(x => x.SourceType == sourceFilter);
            
        // Apply date filter
        var now = DateTime.Now;
        items = dateFilter switch
        {
            "today" => items.Where(x => x.Timestamp.Date == now.Date),
            "week" => items.Where(x => (now - x.Timestamp).TotalDays <= 7),
            "month" => items.Where(x => (now - x.Timestamp).TotalDays <= 30),
            _ => items // "all" or any other value
        };
        
        // Apply search term filter if not empty
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var term = searchTerm.Trim().ToLowerInvariant();
            items = items.Where(x => 
                (x.Summary != null && x.Summary.ToLowerInvariant().Contains(term)) || 
                (x.FullAnalysis != null && x.FullAnalysis.ToLowerInvariant().Contains(term)) ||
                (x.UserInput != null && x.UserInput.ToLowerInvariant().Contains(term)));
        }
        
        return items.ToList();
    }private void OpenAnalysis(AnalysisHistoryItem item)
    {
        // In a real implementation, you might navigate to a details page
        // or open a modal with the full analysis
        ToggleExpand(item.Id); // For now, just expand the item
    }
      private void ResetFilters()
    {
        dateFilter = "all";
        sourceFilter = "all";
        searchTerm = string.Empty;
    }
    
    private void ClearSearch()
    {
        searchTerm = string.Empty;
        StateHasChanged();
    }

    private async Task ConfirmDelete(string id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this item? This cannot be undone."))
        {
            await DeleteItem(id);
        }
    }
    
    private async Task CopyToClipboard(AnalysisHistoryItem item)
    {
        if (!string.IsNullOrEmpty(item.FullAnalysis))
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", item.FullAnalysis);
            await ToastService.ShowSuccessAsync("Analysis copied to clipboard", 3000);
        }
        else if (!string.IsNullOrEmpty(item.Summary))
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", item.Summary);
            await ToastService.ShowSuccessAsync("Summary copied to clipboard", 3000);
        }
    }

    private void ShareAnalysis(AnalysisHistoryItem item)
    {
        selectedAnalysis = item;
        shareError = string.Empty;
        shareLink = string.Empty;
        isShareModalVisible = true;
        
        // Start the sharing process
        _ = ShareSelectedAnalysis();
    }

    private async Task ShareSelectedAnalysis()
    {
        if (selectedAnalysis == null) return;

        try
        {
            isSharing = true;
            shareError = string.Empty;
            shareLink = string.Empty;
            
            // Create an AnalysisData object from the history item
            var analysisData = new AnalysisData
            {
                Id = selectedAnalysis.Id,
                Title = $"{selectedAnalysis.SourceType} Analysis",
                Summary = selectedAnalysis.Summary,
                FullAnalysis = selectedAnalysis.FullAnalysis,
                SourceType = selectedAnalysis.SourceType,
                UserInput = selectedAnalysis.UserInput,
                CreatedDate = selectedAnalysis.Timestamp
            };
            
            // Share the analysis
            var sharedId = await SharingService.ShareAnalysisAsync(analysisData);
            
            if (string.IsNullOrEmpty(sharedId))
            {
                shareError = "Failed to generate share link. Please try again.";
                return;
            }
            
            // Create the share link
            var baseUrl = NavigationManager.BaseUri.TrimEnd('/');
            shareLink = $"{baseUrl}/shared/{sharedId}";
            
            // Save to shared history
            var sharedRecord = new SharedAnalysisRecord
            {
                Id = sharedId,
                Title = $"{selectedAnalysis.SourceType} Analysis",
                SourceType = selectedAnalysis.SourceType,
                SourceId = selectedAnalysis.Id,
                SharedDate = DateTime.UtcNow
            };
            
            await SharingService.SaveSharedAnalysisToHistoryAsync(sharedRecord);
        }
        catch (Exception ex)
        {
            shareError = "An error occurred while sharing the analysis. Please try again.";
        }
        finally
        {
            isSharing = false;
        }
    }
}
