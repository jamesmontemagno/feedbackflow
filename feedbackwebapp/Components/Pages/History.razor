@page "/history"
@inject FeedbackWebApp.Services.Interfaces.IHistoryService HistoryService
@inject FeedbackWebApp.Services.Interfaces.IAnalysisSharingService SharingService
@inject FeedbackWebApp.Services.Authentication.AuthenticationService AuthService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject FeedbackWebApp.Services.IToastService ToastService
@inject FeedbackWebApp.Services.IHistoryHelper HistoryHelper
@using SharedDump.Models
@using Markdig
@using Microsoft.JSInterop
@using FeedbackWebApp.Components.Shared

<PageTitle>Analysis History</PageTitle>

<ConfirmationDialog 
    IsVisible="@isConfirmationDialogVisible"
    Title="@confirmationDialogTitle"
    Message="@confirmationDialogMessage"
    ConfirmText="@confirmationDialogConfirmText"
    ConfirmButtonClass="@confirmationDialogButtonClass"
    OnConfirm="@HandleConfirmationDialogConfirm"
    OnCancel="@HandleConfirmationDialogCancel" />

<div class="container-lg py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="feedbackflow-title mb-0">Analysis History</h1>
        <div class="d-flex align-items-center">
            @if (historyItems?.Any(h => h.IsShared) == true)
            {
                <button class="btn btn-info me-2 action-btn px-4 py-2" @onclick="ShowSharedOnly">
                    <i class="bi bi-share me-2"></i>Shared
                </button>
            }
            @if (historyItems is { Count: > 0 })
            {
                <button class="btn btn-danger clear-all-btn action-btn px-4 py-2" @onclick="ClearHistory">
                    <i class="bi bi-trash me-2"></i>Clear All
                </button>
            }
        </div>
    </div>
      @if (historyItems is { Count: > 0 })
    {
        <div class="filter-section card bg-body dark-theme-card mb-4 p-3 shadow-sm">
            <div class="row g-3">
                <div class="col-12 mb-2">
                    <label for="searchFilter" class="form-label">Search Analysis Content</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-search"></i></span>
                        <input type="text" class="form-control" id="searchFilter" placeholder="Search through analysis content..." 
                               @bind="searchTerm" @bind:event="oninput" @bind:after="StateHasChanged" />                        @if (!string.IsNullOrWhiteSpace(searchTerm))
                        {
                            <button class="btn btn-outline-secondary action-btn" type="button" @onclick="ClearSearch">
                                <i class="bi bi-x-circle"></i>
                            </button>
                        }
                    </div>
                </div>
                <div class="col-md-6">
                    <label for="dateFilter" class="form-label">Date Range</label>                    
                    <select class="form-select" id="dateFilter" @bind="dateFilter" @bind:after="StateHasChanged">
                        <option value="all">All Time</option>
                        <option value="today">Today</option>
                        <option value="week">Last 7 Days</option>
                        <option value="month">Last 30 Days</option>
                    </select>
                </div>
                <div class="col-md-6">
                    <label for="sourceFilter" class="form-label">Service Type</label>                    
                    <select class="form-select" id="sourceFilter" @bind="sourceFilter" @bind:after="StateHasChanged">
                        <option value="all">All Services</option>
                        <option value="YouTube">YouTube</option>
                        <option value="GitHub">GitHub</option>
                        <option value="Reddit">Reddit</option>
                        <option value="Twitter">Twitter</option>
                        <option value="HackerNews">HackerNews</option>
                        <option value="DevBlogs">DevBlogs</option>
                        <option value="Manual">Manual</option>
                    </select>
                </div>
                <div class="col-md-6">
                    <label for="sharedFilter" class="form-label">Sharing Status</label>                    
                    <select class="form-select" id="sharedFilter" @bind="sharedFilter" @bind:after="StateHasChanged">
                        <option value="all">All Items</option>
                        <option value="shared">Shared Only</option>
                        <option value="notshared">Not Shared</option>
                    </select>
                </div>
            </div>
        </div>
    }

    @if (historyItems is null)
    {
        <div class="loading-state card bg-body dark-theme-card shadow-sm">
            <div class="card-body">
                <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p>Loading your analysis history...</p>
                <small>This will only take a moment</small>
            </div>
        </div>
    }
    else if (!historyItems.Any())
    {
        <div class="empty-state card bg-body dark-theme-card shadow-sm">
            <div class="card-body text-center">
                <i class="bi bi-clock-history display-4 mb-3"></i>
                <p class="mb-2">No analysis history found.</p>
                <small class="text-muted empty-state-hint d-block">Create your first analysis to see it appear here!</small>
            </div>
        </div>
    }    
    else if (filteredItems is { Count: > 0 })
    {
        <div class="list-group" style="overflow-y: auto;">
            <Virtualize Items="filteredItems" Context="item" ItemSize="250">
                <div class="list-group-item @(item.IsShared ? "shared-item" : "")" @key="item.Id">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <div class="d-flex align-items-center gap-2">                            
                            <i class="bi @HistoryHelper.GetServiceIcon(item.SourceType) service-icon"></i>
                            <span class="source-badge">@item.SourceType</span>
                            <small class="text-muted">@item.Timestamp.ToLocalTime().ToString("g")</small>
                            @if (item.IsShared)
                            {
                                <span class="shared-status">
                                    <i class="bi bi-cloud-check"></i>
                                    Shared
                                </span>
                            }
                        </div>
                        <div class="d-flex align-items-center gap-2">
                            <button class="btn btn-sm btn-outline-primary action-btn" title="Copy Analysis" @onclick="() => HistoryHelper.CopyToClipboard(item, JSRuntime, ToastService)">
                                <i class="bi bi-clipboard"></i>
                            </button>
                            @if (!item.IsShared)
                            {                                
                                @if (isAuthenticated)
                                {
                                    <button class="btn btn-sm btn-outline-info action-btn" title="Create Share Link" @onclick="() => ShareAnalysis(item)">
                                        <i class="bi bi-share"></i>
                                        Share
                                    </button>
                                }
                                else
                                {
                                    <button class="btn btn-sm btn-outline-primary action-btn" title="Login to Share" @onclick="NavigateToLogin">
                                        <i class="bi bi-box-arrow-in-right"></i>
                                        Login
                                    </button>
                                }
                            }
                            else
                            {
                                <button class="btn btn-sm btn-outline-info action-btn" title="Copy Share Link" @onclick="() => HistoryHelper.CopyShareLink(item, NavigationManager.BaseUri, JSRuntime, ToastService)">
                                    <i class="bi bi-link-45deg"></i>
                                    Copy Link
                                </button>
                            }
                            @if(item.SourceType != "Manual")
                            {
                                <a class="btn btn-sm btn-outline-primary action-btn" title="Open Source" target="_blank" rel="noopener noreferrer" href="@HistoryHelper.GetSourceUrl(item)">
                                    <i class="bi bi-box-arrow-up-right"></i>
                                </a>
                            }
                            <button class="btn btn-sm btn-outline-danger action-btn" title="Delete" @onclick="() => ConfirmDelete(item.Id)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </div>
                                        
                    @if (!string.IsNullOrWhiteSpace(item.UserInput) && item.SourceType != "Manual")
                    {
                        <div class="user-input mb-3">
                            <strong>Input:</strong> @item.UserInput
                        </div>
                    }

                    <div class="analysis-content">
                        <button class="btn btn-sm mb-3 action-btn @(expandedItems.Contains(item.Id) ? "btn-outline-secondary" : "btn-outline-primary")" 
                                @onclick="() => ToggleExpand(item.Id)">
                            <i class="bi @(expandedItems.Contains(item.Id) ? "bi-chevron-down" : "bi-chevron-right") me-1"></i>
                            @(expandedItems.Contains(item.Id) ? "Show Summary" : "Show Full Analysis")
                        </button>
                        
                        <div class="content-wrapper">
                            @if (expandedItems.Contains(item.Id) && !string.IsNullOrEmpty(item.FullAnalysis))
                            {
                                <div class="analysis-badge mb-2">Full Analysis</div>
                            }
                            <div class="markdown-content">                                @((MarkupString)HistoryHelper.ConvertMarkdownToHtml(
                                    expandedItems.Contains(item.Id) && !string.IsNullOrEmpty(item.FullAnalysis) 
                                        ? item.FullAnalysis 
                                        : item.Summary))
                            </div>
                        </div>
                    </div>
                </div>
            </Virtualize>
        </div>
    }
</div>

@code {

    private List<AnalysisHistoryItem>? historyItems;
    private List<AnalysisHistoryItem>? filteredItems => FilterHistoryItems();
    private HashSet<string> expandedItems = new();
    private string dateFilter = "all";
    private string sourceFilter = "all";
    private string sharedFilter = "all";
    private string searchTerm = string.Empty;
    private bool isProcessingShare = false;
    private bool isAuthenticated = false;

    // Confirmation dialog state
    private bool isConfirmationDialogVisible;
    private string confirmationDialogTitle = "";
    private string confirmationDialogMessage = "";
    private string confirmationDialogConfirmText = "";
    private string confirmationDialogButtonClass = "";
    private Func<Task>? onConfirmAction;    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isAuthenticated = await AuthService.IsAuthenticatedAsync();
            historyItems = await HistoryService.GetHistoryAsync();
            
            // Check for expired shared items
            if (historyItems?.Any(h => h.IsShared) == true)
            {
                var thirtyDaysAgo = DateTime.UtcNow.AddDays(-30);
                var expiredItems = historyItems.Where(h => h.IsShared && h.SharedDate <= thirtyDaysAgo).ToList();
                
                foreach (var item in expiredItems)
                {
                    var updatedItem = item with 
                    { 
                        IsShared = false,
                        SharedId = null,
                        SharedDate = null
                    };
                    await HistoryService.UpdateHistoryItemAsync(updatedItem);
                }
                
                if (expiredItems.Any())
                {
                    historyItems = await HistoryService.GetHistoryAsync();
                }
            }
            
            StateHasChanged();
        }
    }

    private async Task DeleteItem(string id)
    {
        await HistoryService.DeleteHistoryItemAsync(id);
        historyItems = await HistoryService.GetHistoryAsync();
        expandedItems.Remove(id);
    }    

    private Task ClearHistory()
    {
        return ShowConfirmationDialog(
            "Clear History",
            "Are you sure you want to clear all history? This action cannot be undone.",
            "Clear All",
            "btn-danger",
            async () =>
            {
                await HistoryService.ClearHistoryAsync();
                historyItems = new();
                expandedItems.Clear();
            });
    }

    private void ToggleExpand(string id)
    {
        if (!expandedItems.Add(id))
        {
            expandedItems.Remove(id);
        }
    }    
    private List<AnalysisHistoryItem> FilterHistoryItems()
    {
        if (historyItems == null)
            return new List<AnalysisHistoryItem>();

        var items = historyItems.AsEnumerable();

        // Apply source filter
        if (sourceFilter != "all")
            items = items.Where(x => x.SourceType == sourceFilter);

        // Apply shared filter
        if (sharedFilter != "all")
        {
            items = sharedFilter switch
            {
                "shared" => items.Where(x => x.IsShared),
                "notshared" => items.Where(x => !x.IsShared),
                _ => items // all
            };
        }

        // Apply date filter
        var now = DateTime.Now;
        items = dateFilter switch
        {
            "today" => items.Where(x => x.Timestamp.Date == now.Date),
            "week" => items.Where(x => (now - x.Timestamp).TotalDays <= 7),
            "month" => items.Where(x => (now - x.Timestamp).TotalDays <= 30),
            _ => items // "all" or any other value
        };

        // Apply search term filter if not empty
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var term = searchTerm.Trim().ToLowerInvariant();
            items = items.Where(x => 
                (x.Summary != null && x.Summary.ToLowerInvariant().Contains(term)) || 
                (x.FullAnalysis != null && x.FullAnalysis.ToLowerInvariant().Contains(term)) ||
                (x.UserInput != null && x.UserInput.ToLowerInvariant().Contains(term)));
        }

        return items.ToList();
    }

    private void OpenAnalysis(AnalysisHistoryItem item)
    {
        // In a real implementation, you might navigate to a details page
        // or open a modal with the full analysis
        ToggleExpand(item.Id); // For now, just expand the item
    }

    private void ResetFilters()
    {
        dateFilter = "all";
        sourceFilter = "all";
        sharedFilter = "all";
        searchTerm = string.Empty;
    }

    private void ClearSearch()
    {
        searchTerm = string.Empty;
        StateHasChanged();
    }

    private void ShowSharedOnly()
    {
        sharedFilter = "shared";
        StateHasChanged();
    }    
    
    private Task ConfirmDelete(string id)
    {
        return ShowConfirmationDialog(
            "Delete Item",
            "Are you sure you want to delete this item? This action cannot be undone.",
            "Delete",
            "btn-danger",
            () => DeleteItem(id));
    }

    private Task ShowConfirmationDialog(string title, string message, string confirmText, string buttonClass, Func<Task> onConfirm)
    {
        confirmationDialogTitle = title;
        confirmationDialogMessage = message;
        confirmationDialogConfirmText = confirmText;
        confirmationDialogButtonClass = buttonClass;
        onConfirmAction = onConfirm;
        isConfirmationDialogVisible = true;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void HandleConfirmationDialogCancel()
    {
        isConfirmationDialogVisible = false;
        onConfirmAction = null;
        StateHasChanged();
    }

    private async Task HandleConfirmationDialogConfirm()
    {
        isConfirmationDialogVisible = false;
        StateHasChanged();
        
        if (onConfirmAction != null)
        {
            await onConfirmAction();
        }
        onConfirmAction = null;
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/");
    }

    private async Task ShareAnalysis(AnalysisHistoryItem item)
    {
        if(isProcessingShare)
            return;
            
        isProcessingShare = true;
        StateHasChanged();

        
        await ToastService.ShowInfoAsync("Creating share link...", 3000);

        try
        {
            var analysisData = new AnalysisData
            {
                Id = item.Id,
                Title = $"{item.SourceType} Analysis",
                Summary = item.Summary,
                FullAnalysis = item.FullAnalysis,
                SourceType = item.SourceType,
                UserInput = item.UserInput,
                CreatedDate = item.Timestamp
            };

            var sharedId = await SharingService.ShareAnalysisAsync(analysisData);
            await Task.Delay(1000); // Simulate processing delay

            if (string.IsNullOrEmpty(sharedId))
            {
                isProcessingShare = false;
                await ToastService.ShowErrorAsync("Unable to save analysis.");
                StateHasChanged();
                return;
            }
            
            await SharingService.UpdateHistoryItemWithShareInfoAsync(item.Id, sharedId);
              // Refresh the history list
            historyItems = await HistoryService.GetHistoryAsync();
              // Trigger confetti and show success message
            var confettiOptions = new { particleCount = 100, spread = 70, origin = new { y = 0.6 } };
            await JSRuntime.InvokeVoidAsync("confetti", confettiOptions);
            var shareLink = $"{NavigationManager.BaseUri.TrimEnd('/')}/shared/{sharedId}";
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", shareLink);             
             // Trigger confetti and show success message
            await ToastService.ShowSuccessAsync("Share link copied to clipboard! The link will be valid for 30 days.", 5000);
        }
        catch (Exception ex)
        {
            await ToastService.ShowErrorAsync($"Unable to save analysis: {ex.Message}");
        }
        finally
        {
            isProcessingShare = false;
            StateHasChanged();
        }
    }
}
