@page "/admin/dashboard"
@using FeedbackWebApp.Services
@using FeedbackWebApp.Services.Account
@using FeedbackWebApp.Components.Admin
@using FeedbackWebApp.Components.Shared
@using SharedDump.Models.Admin
@using SharedDump.Models.Account
@using SharedDump.Utils
@inject IAdminDashboardService AdminDashboardService
@inject IAccountServiceProvider AccountServiceProvider
@inject IToastService ToastService
@inject NavigationManager Navigation

@namespace FeedbackWebApp.Components.Pages.Admin

<PageTitle>Admin Dashboard - FeedbackFlow</PageTitle>

<div class="container my-4">
    <div class="mb-3">
        <a href="/admin" class="btn btn-outline-secondary btn-sm">
            <i class="bi bi-arrow-left me-1"></i> Back to Admin Home
        </a>
    </div>
    @if (isLoading)
    {
        <div class="text-center py-4">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2 text-muted">Loading admin dashboard...</p>
        </div>
    }
    else if (!isAdmin)
    {
        <div class="alert alert-danger" role="alert">
            <i class="bi bi-shield-exclamation me-2"></i>
            <strong>Access Denied:</strong> This page is only available to administrators.
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            <i class="bi bi-exclamation-circle me-2"></i>
            <strong>Error:</strong> @errorMessage
            <button type="button" class="btn btn-outline-danger btn-sm ms-3" @onclick="LoadDashboard">
                <i class="bi bi-arrow-clockwise me-1"></i>Retry
            </button>
        </div>
    }
    else
    {
        <div class="admin-header mb-4">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="feedbackflow-title mb-2">
                        <i class="bi bi-speedometer2 me-2"></i>
                        Admin Dashboard
                    </h1>
                    <p class="text-muted mb-0">System metrics and user analytics</p>
                </div>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-primary btn-sm" @onclick="LoadDashboard" disabled="@isRefreshing">
                        @if (isRefreshing)
                        {
                            <span class="spinner-border spinner-border-sm me-1" role="status"></span>
                        }
                        else
                        {
                            <i class="bi bi-arrow-clockwise me-1"></i>
                        }
                        Refresh
                    </button>
                    <small class="text-muted align-self-center">
                        Updated: @(metrics?.GeneratedAt.ToString("MMM d, h:mm tt") ?? "Never")
                    </small>
                </div>
            </div>
        </div>

        <div class="segmented-tabs mb-4" role="tablist" aria-label="Admin Dashboard Sections">
            <button type="button" class="segment @(activeTab == "overview" ? "active" : null)" role="tab" aria-selected="@(activeTab == "overview")" aria-controls="overview-panel" id="overview-tab" @onclick='() => SetActiveTab("overview")' @onkeydown='e => OnTabKeyDown(e,"overview")'>
                <i class="bi bi-graph-up"></i><span>Overview</span>
            </button>
            <button type="button" class="segment @(activeTab == "users" ? "active" : null)" role="tab" aria-selected="@(activeTab == "users")" aria-controls="users-panel" id="users-tab" @onclick='() => SetActiveTab("users")' @onkeydown='e => OnTabKeyDown(e,"users")'>
                <i class="bi bi-people"></i><span>User Distribution</span>
            </button>
            <button type="button" class="segment @(activeTab == "usage" ? "active" : null)" role="tab" aria-selected="@(activeTab == "usage")" aria-controls="usage-panel" id="usage-tab" @onclick='() => SetActiveTab("usage")' @onkeydown='e => OnTabKeyDown(e,"usage")'>
                <i class="bi bi-bar-chart"></i><span>Usage Consumption</span>
            </button>
            <button type="button" class="segment @(activeTab == "api" ? "active" : null)" role="tab" aria-selected="@(activeTab == "api")" aria-controls="api-panel" id="api-tab" @onclick='() => SetActiveTab("api")' @onkeydown='e => OnTabKeyDown(e,"api")'>
                <i class="bi bi-code-slash"></i><span>API Adoption</span>
            </button>
        </div>

        <div class="tab-content admin-tab-content mt-4">
            @if (activeTab == "overview") { <div id="overview-panel" role="tabpanel" aria-labelledby="overview-tab"><AdminOverviewWidget Metrics="metrics" /></div> }
            @if (activeTab == "users") { <div id="users-panel" role="tabpanel" aria-labelledby="users-tab"><AdminUserDistributionWidget UserStats="metrics?.UserStats" /></div> }
            @if (activeTab == "usage") { <div id="usage-panel" role="tabpanel" aria-labelledby="usage-tab"><AdminUsageConsumptionWidget UsageStats="metrics?.UsageStats" /></div> }
            @if (activeTab == "api") { <div id="api-panel" role="tabpanel" aria-labelledby="api-tab"><AdminApiAdoptionWidget ApiStats="metrics?.ApiStats" /></div> }
        </div>
    }
</div>

@if (showUsageLimitDialog && usageLimitError != null)
{
    <UsageLimitDialog UsageError="usageLimitError" IsVisible="showUsageLimitDialog" OnClose="() => showUsageLimitDialog = false" />
}

@code {
    private bool isLoading = true;
    private bool isAdmin = false;
    private bool isRefreshing = false;
    private string errorMessage = string.Empty;
    private string activeTab = "overview";
    private AdminDashboardMetrics? metrics;
    private bool showUsageLimitDialog = false;
    private UsageValidationResult? usageLimitError = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            var accountService = AccountServiceProvider.GetService();
            var accountResult = await accountService.GetUserAccountAndLimitsAsync();
            if (accountResult.HasValue)
            {
                isAdmin = accountResult.Value.account?.Tier == AccountTier.Admin;
            }
            if (isAdmin)
            {
                await LoadDashboard();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error initializing admin dashboard: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadDashboard()
    {
        try
        {
            isRefreshing = true;
            errorMessage = string.Empty;
            metrics = await AdminDashboardService.GetDashboardMetricsAsync();
            if(ToastService is not null) { await ToastService.ShowInfoAsync("Admin dashboard metrics loaded successfully"); }
        }
        catch (UnauthorizedAccessException ex)
        {
            errorMessage = ex.Message;
            if(ToastService is not null) { await ToastService.ShowErrorAsync("Access denied: Admin privileges required"); }
        }
        catch (Exception ex)
        {
            if (UsageLimitErrorHelper.TryParseUsageLimitError(ex.Message, out var limitError))
            {
                usageLimitError = limitError;
                showUsageLimitDialog = true;
            }
            else
            {
                errorMessage = $"Failed to load dashboard metrics: {ex.Message}";
                if(ToastService is not null) { await ToastService.ShowErrorAsync("Failed to load admin dashboard"); }
            }
        }
        finally
        {
            isRefreshing = false;
        }
    }

    private void SetActiveTab(string tab) => activeTab = tab;

    private void OnTabKeyDown(KeyboardEventArgs e, string currentTab)
    {
        if (e.Key == "ArrowRight" || e.Key == "ArrowLeft")
        {
            var order = new List<string> { "overview", "users", "usage", "api" };
            var index = order.IndexOf(currentTab);
            if (index == -1) return;
            if (e.Key == "ArrowRight") index = (index + 1) % order.Count; else index = (index - 1 + order.Count) % order.Count;
            SetActiveTab(order[index]);
        }
        else if (e.Key == "Home")
        {
            SetActiveTab("overview");
        }
        else if (e.Key == "End")
        {
            SetActiveTab("api");
        }
    }
}
