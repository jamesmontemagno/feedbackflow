@page "/admin"
@using FeedbackWebApp.Components.Admin
@using FeedbackWebApp.Services.Authentication
@using FeedbackWebApp.Services.Account
@using SharedDump.Models.Account
@using SharedDump.Utils
@inject IAuthenticationService AuthService
@inject IAccountServiceProvider AccountServiceProvider
@inject IToastService ToastService
@inject NavigationManager NavigationManager
@namespace FeedbackWebApp.Components.Pages.Admin

<PageTitle>Admin - FeedbackFlow</PageTitle>

<div class="container my-4">
    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3 text-muted">Validating administrator access...</p>
        </div>
    }
    else if (!isAuthenticated)
    {
        <div class="alert alert-warning d-flex align-items-center" role="alert">
            <i class="bi bi-box-arrow-in-right me-2"></i>
            <div>You must be signed in to view admin features.</div>
        </div>
    }
    else if (!isAdmin)
    {
        <div class="alert alert-danger d-flex align-items-center" role="alert">
            <i class="bi bi-shield-exclamation me-2"></i>
            <div>Access denied. Administrator privileges required.</div>
        </div>
    }
    else if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger" role="alert">
            <i class="bi bi-exclamation-triangle me-2"></i>
            <strong>Error:</strong> @errorMessage
            <button class="btn btn-sm btn-outline-danger ms-2" @onclick="ValidateAdminAsync">
                <i class="bi bi-arrow-clockwise"></i> Retry
            </button>
        </div>
    }
    else
    {
        <h1 class="feedbackflow-title mb-4 d-flex align-items-center gap-2">
            <i class="bi bi-gear-fill"></i>
            Administration
        </h1>
        <AdminFeaturesPanel />
    }
</div>

@code {
    private bool isLoading = true;
    private bool isAuthenticated = false;
    private bool isAdmin = false;
    private string errorMessage = string.Empty;
    private bool _firstRenderProcessed = false;

    // Initial render sets loading state; actual auth happens in OnAfterRenderAsync
    protected override void OnInitialized()
    {
        isLoading = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_firstRenderProcessed)
        {
            _firstRenderProcessed = true;
            await RunAuthFlowAsync();
        }
    }

    private async Task RunAuthFlowAsync()
    {
        try
        {
            isLoading = true;
            StateHasChanged();

            isAuthenticated = await AuthService.IsAuthenticatedAsync();
            if (!isAuthenticated)
            {
                // Redirect to home (login) similar to Reports page pattern
                NavigationManager.NavigateTo("/");
                return;
            }

            await ValidateAdminAsync();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            if (ToastService is not null)
            {
                await ToastService.ShowErrorAsync("Failed to validate admin access");
            }
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ValidateAdminAsync()
    {
        try
        {
            errorMessage = string.Empty;
            var accountService = AccountServiceProvider.GetService();
            var accountResult = await accountService.GetUserAccountAndLimitsAsync();
            if (accountResult.HasValue)
            {
                isAdmin = accountResult.Value.account?.Tier == AccountTier.Admin;
            }

            if (!isAdmin && ToastService is not null)
            {
                await ToastService.ShowErrorAsync("Admin access required");
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }
}
