@page "/admin/api-keys"
@using FeedbackWebApp.Services.Authentication
@using FeedbackWebApp.Services.Account
@using SharedDump.Models.Account
@inject IAuthenticationService AuthService
@inject IAccountServiceProvider AccountServiceProvider
@inject IAdminApiKeyService AdminApiKeyService
@inject IToastService ToastService
@inject NavigationManager Navigation

@using FeedbackWebApp.Components.Admin
@using FeedbackWebApp.Components.Shared
@namespace FeedbackWebApp.Components.Pages.Admin

<PageTitle>Admin API Keys - FeedbackFlow</PageTitle>

<div class="container my-4">
    <div class="mb-3">
        <a href="/admin" class="btn btn-outline-secondary btn-sm">
            <i class="bi bi-arrow-left me-1"></i> Back to Admin Home
        </a>
    </div>
    @if (isLoading)
    {
        <div class="text-center py-4">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2 text-muted">Loading admin API keys...</p>
        </div>
    }
    else if (!isAdmin)
    {
        <div class="alert alert-danger" role="alert">
            <i class="bi bi-shield-exclamation me-2"></i>
            <strong>Access Denied:</strong> This page is only available to administrators.
        </div>
    }
    else
    {
        <div class="d-flex justify-content-between align-items-center mb-4 admin-header">
            <div>
                <h1 class="feedbackflow-title mb-2">
                    <i class="bi bi-key me-2"></i>
                    API Key Management
                </h1>
                <p class="text-muted mb-0">Manage user API keys, enable/disable access, and monitor usage statistics</p>
            </div>
        </div>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                <i class="bi bi-exclamation-triangle me-2"></i>
                @errorMessage
            </div>
        }
        <AdminApiKeyManagement />
    }
</div>

@code {
    private bool isLoading = true;
    private bool isAdmin = false;
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            var isAuthenticated = await AuthService.IsAuthenticatedAsync();
            if (!isAuthenticated) { Navigation.NavigateTo("/"); return; }
            var accountService = AccountServiceProvider.GetService();
            var accountResult = await accountService.GetUserAccountAndLimitsAsync();
            if (accountResult.HasValue) { isAdmin = accountResult.Value.account?.Tier == AccountTier.Admin; }
        }
        catch (Exception ex) { errorMessage = $"Error loading admin API keys: {ex.Message}"; }
        finally { isLoading = false; }
    }
}
