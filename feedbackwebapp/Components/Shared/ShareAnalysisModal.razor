@inject IJSRuntime JSRuntime
@inject FeedbackWebApp.Services.IToastService ToastService

<div class="modal-backdrop @(IsVisible ? "show" : "d-none")" @onclick="Close"></div>
<div class="modal share-modal @(IsVisible ? "show" : "d-none")" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Share Analysis</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="Close"></button>
            </div>
            <div class="modal-body">
                @if (IsSharing)
                {
                    <div class="text-center my-4">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Generating share link...</span>
                        </div>
                        <p class="mt-3">Generating shareable link...</p>
                    </div>
                }
                else if (!string.IsNullOrEmpty(Error))
                {
                    <div class="alert alert-danger" role="alert">
                        <i class="bi bi-exclamation-triangle-fill me-2"></i>
                        @Error
                    </div>
                    <div class="text-center mt-3">
                        <button class="btn btn-primary" @onclick="RetryShare">
                            <i class="bi bi-arrow-clockwise me-2"></i> Try Again
                        </button>
                    </div>
                }
                else if (!string.IsNullOrEmpty(ShareLink))
                {
                    <div class="alert alert-success mb-4" role="alert">
                        <i class="bi bi-check-circle-fill me-2"></i>
                        Your analysis has been shared successfully!
                    </div>
                    
                    <div class="mb-3">
                        <p>Anyone with this link can view this analysis:</p>
                        <div class="share-link-container">
                            <input type="text" class="form-control" readonly value="@ShareLink" />
                            <button class="btn btn-primary copy-btn" @onclick="CopyToClipboard">
                                <i class="bi @(IsCopied ? "bi-check" : "bi-clipboard")"></i>
                            </button>
                        </div>
                        <small class="text-muted">This analysis will be publicly accessible through this link.</small>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="Close">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public bool IsVisible { get; set; } = false;

    [Parameter]
    public EventCallback<bool> IsVisibleChanged { get; set; }

    [Parameter]
    public bool IsSharing { get; set; } = false;

    [Parameter]
    public EventCallback<bool> IsSharingChanged { get; set; }

    [Parameter]
    public string ShareLink { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<string> ShareLinkChanged { get; set; }

    [Parameter]
    public string Error { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<string> ErrorChanged { get; set; }

    [Parameter]
    public EventCallback OnRetryShare { get; set; }

    private bool IsCopied { get; set; } = false;

    private async Task Close()
    {
        await IsVisibleChanged.InvokeAsync(false);
    }

    private async Task CopyToClipboard()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", ShareLink);
            IsCopied = true;
            await ToastService.ShowSuccessAsync("Link copied to clipboard", 3000);
            
            // Reset the copied state after 2 seconds
            await Task.Delay(2000);
            IsCopied = false;
            StateHasChanged();
        }
        catch (Exception)
        {
            await ToastService.ShowErrorAsync("Failed to copy to clipboard", 3000);
        }
    }

    private async Task RetryShare()
    {
        await OnRetryShare.InvokeAsync();
    }
}