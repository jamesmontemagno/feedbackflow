@inject IJSRuntime JSRuntime

<div class="modal fade @(IsVisible ? "show" : "")" id="validationModal" tabindex="-1" aria-labelledby="validationModalLabel" aria-hidden="@(!IsVisible)" style="display: @(IsVisible ? "block" : "none")">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="validationModalLabel">
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    Validation Error
                </h5>
                <button type="button" class="btn-close btn-close-white" @onclick="Hide" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (!string.IsNullOrEmpty(Title))
                {
                    <h6 class="text-danger mb-3">@Title</h6>
                }
                
                @if (!string.IsNullOrEmpty(Message))
                {
                    <p class="mb-3">@Message</p>
                }

                @if (ValidationErrors.Any())
                {
                    <div class="alert alert-light border">
                        <strong>Issues found:</strong>
                        <ul class="mb-0 mt-2">
                            @foreach (var error in ValidationErrors)
                            {
                                <li class="text-danger">@error</li>
                            }
                        </ul>
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="Hide">
                    <i class="bi bi-x-lg me-1"></i>
                    Close
                </button>
            </div>
        </div>
    </div>
</div>

@if (IsVisible)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public string Message { get; set; } = string.Empty;
    [Parameter] public List<string> ValidationErrors { get; set; } = new();

    public async Task Show(string title, string message, List<string>? errors = null)
    {
        Title = title;
        Message = message;
        ValidationErrors = errors ?? new List<string>();
        IsVisible = true;
        await IsVisibleChanged.InvokeAsync(IsVisible);
        await InvokeAsync(StateHasChanged);
    }

    public async Task Hide()
    {
        IsVisible = false;
        await IsVisibleChanged.InvokeAsync(IsVisible);
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsVisible)
        {
            await JSRuntime.InvokeVoidAsync("document.body.classList.add", "modal-open");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("document.body.classList.remove", "modal-open");
        }
    }
}