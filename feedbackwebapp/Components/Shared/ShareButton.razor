@inject ILogger<ShareButton> Logger
@inject IJSRuntime JSRuntime
@inject FeedbackWebApp.Services.Interfaces.IAnalysisSharingService SharingService
@inject FeedbackWebApp.Services.IToastService ToastService

<button class="btn btn-primary @(ClassNames)" 
        @onclick="OnShareClick" 
        disabled="@(IsSharing || IsDisabled)">
    @if (IsSharing)
    {
        <span class="spinner-border spinner-border-sm me-1" role="status"></span>
        <span>@(SharingText)</span>
    }
    else
    {
        <i class="bi bi-share me-1"></i>
        <span>@(ButtonText)</span>
    }
</button>

@code {
    [Parameter]
    public EventCallback<string> OnShare { get; set; }

    [Parameter]
    public bool IsSharing { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public string ButtonText { get; set; } = "Share";

    [Parameter]
    public string SharingText { get; set; } = "Sharing...";

    [Parameter]
    public string ClassNames { get; set; } = string.Empty;

    [Parameter]
    public bool IsFloating { get; set; } = false;

    [Parameter]
    public SharedDump.Models.AnalysisData? AnalysisData { get; set; }

    private async Task OnShareClick()
    {
        try
        {
            Logger.LogInformation("Share button clicked");

            if (AnalysisData == null)
            {
                await ToastService.ShowErrorAsync("No analysis data available to share.", 3000);
                return;
            }

            // Invoke the parameter callback if provided
            await OnShare.InvokeAsync(string.Empty);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error sharing analysis");
            await ToastService.ShowErrorAsync("An error occurred while sharing the analysis.", 3000);
        }
    }
}